{
    "version": "https://jsonfeed.org/version/1",
    "title": "穷拾の小屋",
    "subtitle": "",
    "icon": "https://blog.jongsh.top/assets/favicon.ico",
    "description": "Talk is cheap, show me the code!",
    "home_page_url": "https://blog.jongsh.top",
    "items": [
        {
            "id": "https://blog.jongsh.top/coding-diary/python-multiprocessing/",
            "url": "https://blog.jongsh.top/coding-diary/python-multiprocessing/",
            "title": "Python 多进程编程",
            "date_published": "2025-03-09T01:57:19.000Z",
            "content_html": "<blockquote>\n<p>许多实际应用场景涉及到大规模数据的处理，这往往离不开并行计算。Python 的  <code>multiprocessing</code>  模块是一个强大而实用的工具，利用多核处理器的优势，将任务分配给多个进程并同时执行，从而提高程序的性能和效率。本文将详细总结如何使用  <code>multiprocessing</code>  模块来实现<strong>多进程编程</strong>。</p>\n</blockquote>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>现代操作系统如 MacOS，UNIX，Linux，Windows 等，都是支持 “多任务” 的操作系统，即可以同时运行多个任务。</p>\n<ul>\n<li>在单核 CPU 环境中，多任务执行是轮流让各个任务占用 CPU 交替执行。由于 CPU 调度执行速度非常快，从而有多个任务同时执行的效果。</li>\n<li>在多核 CPU 环境中，操作系统通过合适的调度算法将多个任务调度到各个 CPU 核心上执行，真正实现了并行计算。</li>\n</ul>\n<p>实现多任务的方式可以分成：多进程模式、多线程模式、以及多进程 + 多线程等。</p>\n<ul>\n<li>进程是计算机中正在运行的程序的实例。每个进程都有自己的地址空间、数据栈和控制信息，可以独立执行任务。</li>\n<li>线程是进程中的一个执行单元，可以看作是轻量级的进程。多个线程共享同一进程的资源，包括内存空间、文件描述符等。</li>\n</ul>\n<p>本文主要介绍 Python 的<strong>多进程编程</strong>。多进程编程具有以下优缺点：</p>\n<p><strong>优点</strong>：</p>\n<ol>\n<li>多进程可以同时执行多个任务，充分利用多核处理器的能力，实现并行处理。这可以显著提高程序的性能和效率，特别是在处理密集型任务或需要大量计算的场景中。</li>\n<li>每个进程都有自己的独立地址空间和执行环境，进程之间互不干扰。这意味着每个进程都可以独立地执行任务，不会受到其他进程的影响。这种独立性使得多进程编程更加健壮和可靠。</li>\n</ol>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>每个进程都需要独立的内存空间和系统资源，包括打开的文件、网络连接等。多进程编程可能会增加系统的资源消耗，尤其是在创建大量进程时。</li>\n<li>在多进程编程中，进程之间的切换需要保存和恢复进程的执行环境，这涉及到上下文切换的开销。频繁的进程切换可能会导致额外的开销，影响程序的性能。</li>\n<li>由于多进程之间的数据是相互隔离的，需要通过特定的机制进行数据共享和同步。这可能涉及到进程间通信（IPC）的复杂性，如队列、管道、共享内存等。正确处理数据共享和同步是多进程编程中的挑战之一。</li>\n</ol>\n<p>多进程编程在并行处理和资源隔离方面具有明显的优势，但也涉及到资源消耗、上下文切换开销、数据共享和同步等问题。在实际应用中，开发者应权衡利弊，根据具体场景选择适合的编程模型和工具。</p>\n<div class=\"note warning\">\n<p>在 Windows 系统中，多进程代码需包裹在  <code>if __name__ == '__main__':</code>  块内，否则可能引发递归创建子进程的错误</p>\n</div>\n<br> \n<h2 id=\"进程\"><a class=\"anchor\" href=\"#进程\">#</a> 进程</h2>\n<p>在 Python 中，可以使用 multiprocessing 模块来创建和管理进程。该模块提供了丰富的类和函数，用于创建、启动和管理进程。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> multiprocessing</pre></td></tr></table></figure><p><code>multiprocessing.Process</code>  为进程类，用于创建进程对象，可以通过继承该类来自定义进程类。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Process<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>group <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> target <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数介绍：</p>\n<ul>\n<li><code>group</code>  参数未使用，值始终为  <code>None</code> ，可以省略不写。</li>\n<li><code>target</code>  表示目标函数，即子进程要执行的任务。</li>\n<li><code>args</code>  表示调用对象的位置参数元组，比如  <code>args=(1,2,'egon',)</code> 。如果只有一个参数，需要在后面加逗号。</li>\n<li><code>kwargs</code>  表示目标函数的字典参数，如  <code>kwargs=&#123;'name':'egon','age':18&#125;</code> 。</li>\n<li><code>name</code>  为子进程的名称（可选，默认值为  <code>Process-N</code> ，其中  <code>N</code>  是进程的编号）。</li>\n</ul>\n<p>创建进程对象时，<strong>推荐使用关键字参数</strong>的方式指定参数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is a good man\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    p <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lucky\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>Process</code>  对象有以下几个主要属性：</p>\n<ul>\n<li><code>p.daemon</code> ：默认值为  <code>False</code> ，如果设为  <code>True</code> ，代表  <code>p</code>  为后台运行的守护进程，当  <code>p</code>  的父进程终止时， <code>p</code>  也随之终止。注意， <code>daemon</code>  属性必须在  <code>p.start()</code>  之前设置，且守护进程不能创建自己的子进程。</li>\n<li><code>p.name</code> ：进程的名称。</li>\n<li><code>p.pid</code> ：进程的  <code>pid</code> ，在调用  <code>p.start()</code>  之前， <code>pid</code>  为  <code>None</code> 。</li>\n</ul>\n<p><code>Process</code>  对象有以下几个主要方法：</p>\n<ul>\n<li><code>p.run()</code> ：进程启动时运行的方法，正是它去调用  <code>target</code>  指定的函数。当继承  <code>Process</code>  类自定义类时，通常需要重写该方法。</li>\n<li><code>p.start()</code> ：启动进程，并调用该子进程中的  <code>p.run()</code> 。 <code>start()</code>  方法只能调用一次，否则会抛出异常。</li>\n<li><code>p.terminate()</code> ：强制终止进程，<strong>不会进行任何清理操作</strong>。如果该进程创建了子进程，该子进程就成了僵尸进程，使用该方法需要特别小心这种情况。如果该进程还保存了一个锁那么也将不会被释放，进而导致死锁。</li>\n<li><code>p.is_alive()</code> ：如果进程仍然运行，返回  <code>True</code> ，否则返回  <code>False</code> 。</li>\n<li><code>p.join([timeout])</code> ：主线程等待  <code>p</code>  终止。 <code>timeout</code>  是可选的超时时间。需要注意， <code>p.join</code>  只能用于  <code>start</code>  方法开启的进程，而不能用于  <code>run</code>  方法开启的进程。</li>\n</ul>\n<blockquote>\n<p>调用  <code>Process</code>  对象方法开启进程的进程称为主进程，对于  <code>Process</code>  对象为子进程。默认情况下，父进程的结束不会影响子进程，父进程会等待子进程结束再结束。如果希望父进程结束时子进程也随之结束，可以将子进程设置为守护进程（ <code>daemon=True</code> ）。</p>\n</blockquote>\n<br> \n<h2 id=\"进程间通信\"><a class=\"anchor\" href=\"#进程间通信\">#</a> 进程间通信</h2>\n<p>进程间通信（Inter-Process Communication，IPC）是指不同进程之间进行数据交换和共享信息的机制。Python 的  <code>multiprocessing</code>  模块提供了多种 IPC 方式，包括队列、管道、共享内存等，需根据场景选择合适机制。</p>\n<h3 id=\"队列\"><a class=\"anchor\" href=\"#队列\">#</a> 队列</h3>\n<p>队列是一种常用的进程间通信方式，通过队列可以实现进程之间的数据传输。</p>\n<p>Python 的  <code>multiprocessing</code>  模块提供了  <code>Queue</code>  类来实现多进程之间的队列通信。进程可以通过  <code>put()</code>  方法将数据放入队列，其他进程则可以通过  <code>get()</code>  方法从队列中获取数据。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process<span class=\"token punctuation\">,</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">producer</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Message </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">consumer</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        item <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 阻塞操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> item <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span>  <span class=\"token comment\"># 终止信号</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Received: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>producer<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p2 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>consumer<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 发送终止信号</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>队列是线程和进程安全的，支持任意可序列化的 Python 对象。默认情况下， <code>put()</code>  和  <code>get()</code>  是阻塞操作，可以通过设置  <code>block=False</code>  或  <code>timeout</code>  参数实现非阻塞操作。</p>\n<p>队列需<strong>显式</strong>传递给子进程（通过参数传递）。队列在大规模数据传输时性能较低，建议用于小规模控制指令。</p>\n<h3 id=\"管道\"><a class=\"anchor\" href=\"#管道\">#</a> 管道</h3>\n<p>管道是另一种常用的进程间通信方式，通过管道可以实现进程之间的<strong>双向通信</strong>。</p>\n<p>Python 的  <code>multiprocessing</code>  模块提供了  <code>Pipe</code>  类来创建管道对象。 <code>Pipe()</code>  方法返回两个连接的管道端，一个用于发送数据，另一个用于接收数据。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process<span class=\"token punctuation\">,</span> Pipe</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"Ready\"</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\"># 发送给父进程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cmd <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\"># 接收父进程指令</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"EXECUTE\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"Task Done\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    parent_conn<span class=\"token punctuation\">,</span> child_conn <span class=\"token operator\">=</span> Pipe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>worker<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>child_conn<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>parent_conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出: Ready</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    parent_conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"EXECUTE\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>parent_conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出: Task Done</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>recv()</code>  方法默认是<strong>阻塞的</strong>。这意味着当调用  <code>recv()</code>  时，如果管道中没有可用的数据，调用方会阻塞，直到管道中有数据可读。若两端同时调用  <code>recv()</code>  可能产生死锁。</p>\n<p>管道适合少量进程间的直接通信。</p>\n<h3 id=\"共享内存\"><a class=\"anchor\" href=\"#共享内存\">#</a> 共享内存</h3>\n<h4 id=\"基础类型共享\"><a class=\"anchor\" href=\"#基础类型共享\">#</a> 基础类型共享</h4>\n<p>共享内存是一种在多进程之间共享数据的高效方式，直接操作共享内存，性能最高。Python 的  <code>multiprocessing</code>  模块提供了  <code>Value</code>  和  <code>Array</code>  类来实现进程间共享数据。 <code>Value</code>  用于共享单个值，而  <code>Array</code>  用于共享数组。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">,</span> Array<span class=\"token punctuation\">,</span> Lock</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>shared_value<span class=\"token punctuation\">,</span> lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">with</span> lock<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        shared_value<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    counter <span class=\"token operator\">=</span> Value<span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    lock <span class=\"token operator\">=</span> Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    procs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>increment<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">,</span> lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> procs<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> procs<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出: 4</span></pre></td></tr></table></figure><p>在创建共享值和共享数组时，需要指定数据类型（如整数、浮点数）和初始值。进程可以通过读写共享值和共享数组来进行进程间的数据共享。但要注意，Python 并没有在底层对共享内存实施额外的保护措施，需在编程中自行配合锁来保证操作原子性。</p>\n<p>常见数据类型映射：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型码</th>\n<th style=\"text-align:center\">C 类型</th>\n<th style=\"text-align:center\">Python 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">'i'</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">int</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">'d'</td>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">float</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">'c'</td>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">bytes (长度 1)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"shared_memory-模块\"><a class=\"anchor\" href=\"#shared_memory-模块\">#</a> shared_memory 模块</h4>\n<p><code>multiprocessing.shared_memory</code>  模块从 Python 3.8 开始提供，主要用于在多个进程之间实现真正的共享内存。它通过底层操作系统的共享内存机制，让不同进程能够直接访问同一片物理内存。相比传统的  <code>Array</code>  和  <code>Value</code>  对象， <code>shared_memory</code>  模块<strong>在大数据量传输时往往更高效</strong>。</p>\n<p>通过以下方式创建或连接到一个  <code>SharedMemory</code>  实例，表示一块共享内存。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> shared_memory</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 创建一块新的共享内存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>shm <span class=\"token operator\">=</span> shared_memory<span class=\"token punctuation\">.</span>SharedMemory<span class=\"token punctuation\">(</span>create<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 或者指定名称</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># shm = shared_memory.SharedMemory(name=\"my_shm\", create=True, size=1024)</span></pre></td></tr></table></figure><ul>\n<li><code>name</code> ：共享内存的标识符（字符串）。若不指定，系统会自动生成一个唯一名称。</li>\n<li><code>create</code> ：布尔值，表示是否新建共享内存。如果设置为  <code>False</code> ，则表示连接到已经存在的共享内存（这时必须提供有效的  <code>name</code> ）。</li>\n<li><code>size</code> ：以字节为单位的共享内存大小，仅在  <code>create=True</code>  时才生效。</li>\n</ul>\n<p>如果要在其他进程中访问同一块共享内存，只需使用相同的  <code>name</code>  并确保  <code>create=False</code> ，同时知道其大小（通常不需要显式指定，若成功连接会自动匹配原有大小）。</p>\n<p><code>SharedMemory</code>  实例对象有如下几个主要属性：</p>\n<ul>\n<li><code>name</code> ：实例的名称，若创建时没有指定，会是系统自动生成的随机字符串。</li>\n<li><code>size</code> ：该共享内存的大小（字节数）。只有在创建时才可以指定，后续读取该属性即可得知实际大小。</li>\n<li><code>buf</code> ：这是一个  <code>memoryview</code>  对象，指向共享内存底层的字节缓冲区。可通过切片、索引等操作来直接读写字节数据。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shm<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">b\"Hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>shm<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># b'Hello'</span></pre></td></tr></table></figure><p><code>SharedMemory</code>  实例对象有如下几个主要方法：</p>\n<ul>\n<li><code>close()</code> ：关闭当前进程对这块共享内存的引用。调用后并不会立即销毁共享内存本身，只是表示当前进程不再使用。</li>\n<li><code>unlink()</code> ：从系统中彻底移除这块共享内存。一旦调用  <code>unlink()</code> ，其他尚未关闭的进程依然可以继续访问，但在所有进程都关闭之后，这块共享内存将被系统回收。因此通常在主进程使用完毕后才会调用  <code>unlink()</code> 。</li>\n</ul>\n<h3 id=\"manager\"><a class=\"anchor\" href=\"#manager\">#</a> Manager</h3>\n<p><code>multiprocessing.Manager</code>  通过代理对象共享复杂数据结构（列表、字典等），自动处理进程间同步，线程安全，但性能较低，适合非高频操作。</p>\n<p><code>Manager</code>  对象的创建分成两种方式：</p>\n<ol>\n<li>\n<p>直接创建，使用完后需要调用  <code>manger.shutdown()</code>  手动关闭。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>manager <span class=\"token operator\">=</span> Manager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>shared_list <span class=\"token operator\">=</span> manager<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># ... 使用后需调用 manager.shutdown ()</span></pre></td></tr></table></figure></li>\n<li>\n<p>上下文管理器（推荐的方法），无需手动关闭。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> Manager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> mgr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    shared_dict <span class=\"token operator\">=</span> mgr<span class=\"token punctuation\">.</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<p><code>Manager</code>  支持的共享数据类型如总结成下表：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>创建方法</th>\n<th>线程安全</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>List</strong></td>\n<td><code>manager.list()</code></td>\n<td>是</td>\n<td>类似 Python 的列表，支持动态增删改查</td>\n</tr>\n<tr>\n<td><strong>Dict</strong></td>\n<td><code>manager.dict()</code></td>\n<td>是</td>\n<td>类似 Python 的字典，支持键值对操作</td>\n</tr>\n<tr>\n<td><strong>Namespace</strong></td>\n<td><code>manager.Namespace()</code></td>\n<td>是</td>\n<td>可以通过 “点” 属性方式访问 / 修改数据</td>\n</tr>\n<tr>\n<td><strong>Value</strong></td>\n<td><code>manager.Value(typecode, value)</code></td>\n<td>是</td>\n<td>存放单个 C 类型变量（如  <code>int</code> 、 <code>double</code>  等）</td>\n</tr>\n<tr>\n<td><strong>Array</strong></td>\n<td><code>manager.Array(typecode, iterable)</code></td>\n<td>是</td>\n<td>存放一组同类型元素，类似定长数组</td>\n</tr>\n<tr>\n<td><strong>Queue</strong></td>\n<td><code>manager.Queue([maxsize])</code></td>\n<td>是</td>\n<td>先进先出队列，用于跨进程通信</td>\n</tr>\n<tr>\n<td><strong>JoinableQueue</strong></td>\n<td><code>manager.JoinableQueue([maxsize])</code></td>\n<td>是</td>\n<td>可阻塞队列，支持  <code>task_done()</code>  和  <code>join()</code></td>\n</tr>\n<tr>\n<td><strong>Lock</strong></td>\n<td><code>manager.Lock()</code></td>\n<td>是</td>\n<td>互斥锁，保证同一时刻只有一个任务访问资源</td>\n</tr>\n<tr>\n<td><strong>RLock</strong></td>\n<td><code>manager.RLock()</code></td>\n<td>是</td>\n<td>可重入锁，同一线程可多次获取锁</td>\n</tr>\n<tr>\n<td><strong>Semaphore</strong></td>\n<td><code>manager.Semaphore([value])</code></td>\n<td>是</td>\n<td>信号量，控制同时访问共享资源的任务数量</td>\n</tr>\n<tr>\n<td><strong>BoundedSemaphore</strong></td>\n<td><code>manager.BoundedSemaphore([value])</code></td>\n<td>是</td>\n<td>有上限的信号量，初始值即最大可用信号量</td>\n</tr>\n<tr>\n<td><strong>Condition</strong></td>\n<td><code>manager.Condition([lock])</code></td>\n<td>是</td>\n<td>条件变量，常配合  <code>Lock</code> / <code>RLock</code>  使用</td>\n</tr>\n<tr>\n<td><strong>Event</strong></td>\n<td><code>manager.Event()</code></td>\n<td>是</td>\n<td>事件同步机制，可通过  <code>set()</code>  /  <code>wait()</code>  控制</td>\n</tr>\n</tbody>\n</table>\n<p>下面是一个使用示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>m_list<span class=\"token punctuation\">,</span> m_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    m_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"new_item\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 操作与普通列表一致</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    m_dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"pid\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">with</span> Manager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> mgr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        data_list <span class=\"token operator\">=</span> mgr<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"init_data\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        data_dict <span class=\"token operator\">=</span> mgr<span class=\"token punctuation\">.</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3.9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        p <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>worker<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>data_list<span class=\"token punctuation\">,</span> data_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data_list<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['init_data', 'new_item']</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data_dict<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'version': 3.9, 'pid': 12345&#125;</span></pre></td></tr></table></figure><h3 id=\"多种通信方式对比\"><a class=\"anchor\" href=\"#多种通信方式对比\">#</a> 多种通信方式对比</h3>\n<p>下面给出几种常见的多进程通信与共享方式的比较与建议，供参考。</p>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>性能</th>\n<th>数据类型限制</th>\n<th>同步机制</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Value/Array</strong></td>\n<td>高</td>\n<td>仅限于基础数值类型（int、float 等）</td>\n<td>需手动加锁</td>\n<td>对少量数值进行频繁读写，追求更高效率的场合</td>\n</tr>\n<tr>\n<td><strong>Manager</strong></td>\n<td>中等</td>\n<td>可以存储任意可序列化的 Python 对象</td>\n<td>自动同步</td>\n<td>需要共享复杂数据结构（如列表、字典）或追求易用性、多进程灵活访问</td>\n</tr>\n<tr>\n<td><strong>Queue</strong></td>\n<td>中等</td>\n<td>任意可序列化对象</td>\n<td>内部已实现同步</td>\n<td>典型的生产者 - 消费者模型，流式任务分发与结果收集</td>\n</tr>\n<tr>\n<td><strong>Pipe</strong></td>\n<td>较高</td>\n<td>任意可序列化对象</td>\n<td>无自动同步</td>\n<td>双向或单向的点对点通信，适合简单的命令或数据在两个进程间快速传递</td>\n</tr>\n<tr>\n<td><strong>shared_memory</strong></td>\n<td>较高</td>\n<td>底层字节缓冲，可结合 NumPy 数组等进行操作</td>\n<td>需自行管理同步</td>\n<td>大数据量、零拷贝共享，如图像处理、科学计算等，需要手动控制并发安全</td>\n</tr>\n</tbody>\n</table>\n<p><strong>使用建议：</strong></p>\n<ol>\n<li><strong>优先使用  <code>Queue</code> </strong> 进行生产者 - 消费者式的任务队列，写法简洁且自带同步机制。</li>\n<li>如果需要频繁读写大规模数值数据（如矩阵或图像），可优先考虑 <strong> <code>shared_memory</code> </strong> 或 <strong> <code>Value/Array + Lock</code> </strong> 的方式来减少拷贝、提高效率。</li>\n<li>当共享数据结构较为复杂且希望自动化处理同步时，可使用 <strong> <code>Manager</code> </strong> 提供的  <code>list()</code> ,  <code>dict()</code>  等方法。</li>\n<li><strong> <code>Pipe</code> </strong> 更适合简单、点对点的通信，不太适合复杂的并发场景。</li>\n<li>在高并发或需要更灵活控制同步的场合，可结合  <code>Lock</code> 、 <code>Semaphore</code> 、 <code>Event</code>  等原语进行更细粒度的并发管理。</li>\n</ol>\n<p><strong>需要特殊说明的是，自动同步并不代表不需要加锁，这里谈到的线程安全指的是调用数据单个方法（如列表的  <code>append()</code> 、 <code>__setitem__()</code> ）是原子操作，而对于复杂的复合操作，依然可能会有共享数据的竞争，需要手动加锁。</strong></p>\n<br> \n<h2 id=\"进程间同步\"><a class=\"anchor\" href=\"#进程间同步\">#</a> 进程间同步</h2>\n<p>进程间同步是确保多个进程按照特定顺序执行或在共享资源上进行互斥访问的一种机制。进程间同步的目的是避免竞态条件和数据不一致的问题。</p>\n<p>Python 提供了多种机制来实现进程间的同步，包括锁、信号量、事件、条件变量等。</p>\n<h3 id=\"锁\"><a class=\"anchor\" href=\"#锁\">#</a> 锁</h3>\n<p>锁是一种最基本的同步机制，用于保护共享资源的互斥访问，确保在任意时刻只有一个进程可以访问共享资源。在 Python 中，可以使用  <code>multiprocessing</code>  模块的  <code>Lock</code>  类来实现锁。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Lock</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lock <span class=\"token operator\">=</span> Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>进程通过调用  <code>acquire()</code>  和  <code>release()</code>  函数来显式控制锁的持有与释放。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lock<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 需要同步的代码块（如修改共享资源）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    lock<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 确保释放锁</span></pre></td></tr></table></figure><p>其中  <code>lock.acquire(blocking=True, timeout=None)</code>  中  <code>blocking=True</code> （默认）表示阻塞直到锁可用，如果为  <code>False</code> ，则立即返回是否成功获取锁。 <code>timeout</code>  参数指定阻塞等待的最长时间，单位是秒。</p>\n<p>为了避免忘记释放锁，推荐使用上下文管理器模式，使用  <code>with</code>  语句自动管理锁的获取与释放。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> lock<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 需要同步的代码块</span></pre></td></tr></table></figure><h3 id=\"信号量\"><a class=\"anchor\" href=\"#信号量\">#</a> 信号量</h3>\n<p>信号量是一种用于控制对共享资源的访问的机制。在多进程编程中，信号量可以用于限制同时访问某个共享资源的进程数量。</p>\n<p>Python 的  <code>multiprocessing</code>  模块提供了  <code>Semaphore</code>  类来实现进程间的信号量机制。</p>\n<p><code>Semaphore</code>  对象初始化时需要传入参数指定资源数量，是对锁（ <code>Lock</code> ）的拓展。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Semaphore</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sem <span class=\"token operator\">=</span> Semaphore<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>sem = Semaphore(3)</code>  表示最多允许 3 个进程同时访问资源。</p>\n<p>同样的，信号量也有  <code>acquire()</code>  和  <code>release()</code>  两个方法进行控制：</p>\n<ul>\n<li><strong> <code>acquire(blocking=True, timeout=None)</code> </strong>：获取信号量，若计数器为 0 则阻塞等待。\n<ul>\n<li><code>blocking=False</code>  表示非阻塞模式，立即返回是否成功获取信号量。</li>\n<li><code>timeout</code>  参数用于设置阻塞等待的最长时间，单位为秒。</li>\n</ul>\n</li>\n<li><strong> <code>release()</code> </strong>：释放信号量，计数器加 1。需注意释放次数不应超过获取次数，否则可能引发逻辑错误。</li>\n</ul>\n<p>此外，信号量也可以使用  <code>with</code>  语句自动管理许可证的获取和释放，避免因异常或忘记释放导致的死锁。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> multiprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>sem<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">with</span> sem<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"进程 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 开始执行\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"进程 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 执行结束\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    sem <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Semaphore<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 允许同时 2 个进程运行</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    processes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>worker<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sem<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> processes<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> processes<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        p<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在上述例子中，创建了一个信号量，初始值为 2。然后创建了 5 个进程，每个进程在执行前会尝试获取信号量，由此实现每次最多两个进程同时执行，其余进程需等待信号量的释放。</p>\n<h3 id=\"事件\"><a class=\"anchor\" href=\"#事件\">#</a> 事件</h3>\n<p>事件是一种用于多进程间通信的同步机制，它允许一个或多个进程等待某个事件的发生，然后再继续执行。</p>\n<p>Python 的  <code>multiprocessing</code>  模块提供了  <code>Event</code>  类来实现进程间的事件同步机制，通过一个<strong>布尔标志位</strong>（初始为  <code>False</code> ）协调多个进程的执行。当标志为  <code>False</code>  时，调用事件对象的  <code>wait()</code>  方法会阻塞进程；当标志被设为  <code>True</code>  时，所有阻塞的进程会被唤醒继续执行。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Event</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>event <span class=\"token operator\">=</span> Event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 初始标志为 False</span></pre></td></tr></table></figure><p><code>Event</code>  对象有如下几种关键方法：</p>\n<ul>\n<li><code>set()</code> ：将标志设为  <code>True</code> ，唤醒所有阻塞的进程。</li>\n<li><code>clear()</code> ：将标志重置为  <code>False</code> ，后续调用  <code>wait()</code>  的进程会再次阻塞。</li>\n<li><code>is_set()</code> ：返回当前标志状态（ <code>True</code>  或  <code>False</code> ）。</li>\n<li><code>wait(timeout=None)</code> ：若标志为  <code>True</code> ：立即返回，不阻塞。若标志为  <code>False</code> ：阻塞当前进程，直到标志被设为  <code>True</code>  或超时（ <code>timeout</code>  参数，单位为秒）。</li>\n</ul>\n<p>下面的红绿灯模型进程展示了  <code>Event</code>  的使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process<span class=\"token punctuation\">,</span> Event</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">traffic_light</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红灯亮\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        event<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 标志设为 False，行人等待</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"绿灯亮\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        event<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 标志设为 True，行人通行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">pedestrian</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    event<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 等待绿灯</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"行人 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 通过马路\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    event <span class=\"token operator\">=</span> Event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># 启动交通灯进程</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    light_process <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>traffic_light<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    light_process<span class=\"token punctuation\">.</span>daemon <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># 设为守护进程，主进程退出时自动终止</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    light_process<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\"># 模拟多个行人进程</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        p <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>pedestrian<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 行人依次到达</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"条件变量\"><a class=\"anchor\" href=\"#条件变量\">#</a> 条件变量</h3>\n<p>条件变量是一种用于多进程间协调和同步的机制，它可以用于控制多个进程之间的执行顺序。</p>\n<p>Python 的  <code>multiprocessing</code>  模块提供了  <code>Condition</code>  类来实现条件变量。它与  <code>Lock</code>  或  <code>RLock</code>  结合使用，通过 <code>wait()</code> 、 <code>notify()</code>  等操作实现进程间通信。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Condition</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cond <span class=\"token operator\">=</span> Condition<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 默认关联一个 RLock，也可手动传入其他锁对象</span></pre></td></tr></table></figure><p>主要方法包括：</p>\n<ul>\n<li><strong> <code>acquire()</code> </strong>：获取关联的锁，进入临界区。</li>\n<li><strong> <code>release()</code> </strong>：释放锁，退出临界区。</li>\n<li><strong> <code>wait(timeout=None)</code> </strong>：释放锁并挂起当前进程，直到收到通知或超时。</li>\n<li><strong> <code>notify(n=1)</code> </strong>：唤醒至多  <code>n</code>  个等待此条件的进程。</li>\n<li><strong> <code>notify_all()</code> </strong>：唤醒所有等待此条件的进程。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Manager<span class=\"token punctuation\">,</span> Condition<span class=\"token punctuation\">,</span> Process</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">producer</span><span class=\"token punctuation\">(</span>shared_list<span class=\"token punctuation\">,</span> cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">with</span> cond<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            shared_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Produced </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            cond<span class=\"token punctuation\">.</span>notify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">consumer</span><span class=\"token punctuation\">(</span>shared_list<span class=\"token punctuation\">,</span> cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">with</span> cond<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>shared_list<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            cond<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        item <span class=\"token operator\">=</span> shared_list<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Consumed </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">with</span> Manager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> manager<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        shared_list <span class=\"token operator\">=</span> manager<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        cond <span class=\"token operator\">=</span> Condition<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>producer<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>shared_list<span class=\"token punctuation\">,</span> cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        p2 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>consumer<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>shared_list<span class=\"token punctuation\">,</span> cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        p2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><br> \n<h2 id=\"进程池\"><a class=\"anchor\" href=\"#进程池\">#</a> 进程池</h2>\n<p>进程池是一种用于管理和调度多个进程的机制，它可以有效地处理并行任务和提高程序的性能。进程池在 Python 中通常使用  <code>multiprocessing</code>  模块提供的  <code>Pool</code>  类来实现。</p>\n<p>进程池的工作原理如下：</p>\n<ol>\n<li>创建进程池时，会启动指定数量的进程，并将它们放入池中。</li>\n<li>池中的进程会等待主进程提交任务。</li>\n<li>主进程通过提交任务给进程池，将任务分配给空闲的进程。</li>\n<li>进程池中的进程执行任务，并将结果返回给主进程。</li>\n<li>主进程获取任务的结果，继续执行其他操作。</li>\n<li>当所有任务完成后，主进程关闭进程池</li>\n</ol>\n<h3 id=\"创建进程池\"><a class=\"anchor\" href=\"#创建进程池\">#</a> 创建进程池</h3>\n<p>使用  <code>multiprocessing.Pool</code>  创建进程池时，需指定进程数量。若不指定，默认使用当前 CPU 的核心数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Pool<span class=\"token punctuation\">(</span>processes<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> initializer<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> initargs<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<ul>\n<li><code>processes</code> ：同时运行的进程数，默认为 CPU 核心数。</li>\n<li><code>initializer</code> ：初始化函数，每个进程启动时会调用。</li>\n<li><code>initargs</code> ：初始化函数的参数元组。</li>\n</ul>\n<p><code>multiprocessing.cpu_count()</code>  函数可以用来获取当前系统的 CPU 核心数，然后根据需要来指定进程池的大小。</p>\n<p>通过  <code>with</code>  语句管理进程池，可自动处理资源释放问题：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> multiprocessing<span class=\"token punctuation\">.</span>Pool<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> pool<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 在此范围内使用池</span></pre></td></tr></table></figure><h3 id=\"提交任务\"><a class=\"anchor\" href=\"#提交任务\">#</a> 提交任务</h3>\n<p><code>multiprocessing.Pool</code>  对象有以下几种常用方法用来提交任务：</p>\n<ul>\n<li>\n<p><code>apply(func, args=(), kwds=&#123;&#125;)</code> ：同步执行单个任务，<strong>阻塞主进程</strong>直到任务完成并返回结果。</p>\n<ul>\n<li><code>func</code> ：要执行的函数；</li>\n<li><code>args</code> ：函数的位置参数（元组形式）；</li>\n<li><code>kwds</code> ：函数的关键字参数（字典形式）。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>result <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>apply_async(func, args=(), kwds=&#123;&#125;, callback=None, error_callback=None)</code> ：异步执行单个任务，<strong>非阻塞主进程</strong>，立即返回  <code>AsyncResult</code>  对象，需通过  <code>.get()</code>  阻塞获取结果。</p>\n<ul>\n<li><code>callback</code> ：任务成功后的回调函数（接收结果作为参数）；</li>\n<li><code>error_callback</code> ：任务异常时的回调函数（接收异常对象作为参数）。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>result <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> callback<span class=\"token operator\">=</span>print_result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 阻塞直到结果返回</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>map(func, iterable, chunksize=None)</code> ：将函数批量映射到可迭代对象的每个元素，返回结果<strong>列表</strong>（按输入顺序排列）。<strong>同步阻塞</strong>主进程，直到所有任务完成。</p>\n<ul>\n<li><code>chunksize</code> ：将任务分块提交，默认根据进程数和数据长度自动计算。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>results <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回 [1, 4, 9]</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>map_async(func, iterable, chunksize=None, callback=None, error_callback=None)</code> ：异步版本的  <code>map</code> ，返回  <code>AsyncResult</code>  对象，需通过  <code>.get()</code>  获取结果<strong>列表</strong>。该方法非阻塞主进程，支持回调处理结果或异常，结果顺序与输入一致。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>result <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span>map_async<span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出 [1, 4, 9]</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>imap(func, iterable, chunksize=None)</code> ：是  <code>map</code>  方法的惰性求值版本，用于<strong>批量处理可迭代数据</strong>。与  <code>map</code>  不同，它不会一次性将所有结果加载到内存，而是通过迭代器按需生成结果，适合处理大规模数据集。返回的迭代器<strong>按输入顺序逐个产出结果</strong>。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Pool</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">with</span> Pool<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> pool<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        results <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span>imap<span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> chunksize<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> res <span class=\"token keyword\">in</span> results<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出顺序：1, 4, 9, 16, 25</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>imap_unordered(func, iterable, chunksize=None)</code> ：功能类似于  <code>imap</code>  方法，但<strong>不保证结果顺序</strong>，哪个任务先完成就先返回结果。</p>\n</li>\n<li>\n<p><code>close()</code> ：关闭进程池，<strong>不再接受新任务</strong>，但已提交的任务会继续执行。该方法在所有任务提交后调用，通常与  <code>join()</code>  配合使用。</p>\n</li>\n<li>\n<p><code>terminate()</code> ：<strong>立即终止所有子进程</strong>，无论任务是否完成。</p>\n</li>\n<li>\n<p><code>join()</code> ：阻塞主进程，等待所有子进程执行完毕，必须在  <code>close()</code>  或  <code>terminate()</code>  之后调用。</p>\n</li>\n</ul>\n<blockquote>\n<p>务必调用  <code>pool.close()</code>  和  <code>pool.join()</code>  确保所有进程正常终止。</p>\n</blockquote>\n<h3 id=\"进程池示例\"><a class=\"anchor\" href=\"#进程池示例\">#</a> 进程池示例</h3>\n<p>下面通过几个示例代码展示进程池的使用。</p>\n<p><strong>批量文件处理</strong>：使用进程池高效处理大量图片：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> multiprocessing</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">process_image</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">with</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> img<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            img<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"resized_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>path<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>path<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">处理成功\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>path<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">处理失败：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    image_files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>f <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jpeg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">with</span> multiprocessing<span class=\"token punctuation\">.</span>Pool<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> pool<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        results <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>process_image<span class=\"token punctuation\">,</span> image_files<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        pool<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        pool<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这段代码使用多进程并行处理当前目录下的所有 JPG/JPEG 图片，将每张图片调整为 800x600 的尺寸并保存为前缀为  <code>resized_</code>  的新文件，同时捕获并返回处理过程中的成功或失败信息，最后打印所有处理结果。</p>\n<p><strong>异步文件下载</strong>：异步下载多个文件并实时显示进度。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> multiprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">download_file</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 模拟下载延迟</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">raise</span> ConnectionError<span class=\"token punctuation\">(</span><span class=\"token string\">\"连接超时\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"已下载 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>url<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\turls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"https://file</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.zip\"</span></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">with</span> multiprocessing<span class=\"token punctuation\">.</span>Pool<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> pool<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">with</span> tqdm<span class=\"token punctuation\">(</span>total<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> desc<span class=\"token operator\">=</span><span class=\"token string\">\"下载进度\"</span><span class=\"token punctuation\">,</span> unit<span class=\"token operator\">=</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> pbar<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">for</span> result <span class=\"token keyword\">in</span> pool<span class=\"token punctuation\">.</span>imap_unordered<span class=\"token punctuation\">(</span>download_file<span class=\"token punctuation\">,</span> urls<span class=\"token punctuation\">,</span> chunksize<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                pbar<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    pbar<span class=\"token punctuation\">.</span>set_postfix_str<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"最新成功: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    pbar<span class=\"token punctuation\">.</span>set_postfix_str<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"最新失败: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> refresh<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                results<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\"># 输出统计信息</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    success_count <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> results <span class=\"token keyword\">if</span> r<span class=\"token punctuation\">[</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\\n下载完成: 成功 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>success_count<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这段代码使用多进程并行下载 20 个模拟文件，通过  <code>tqdm</code>  实时显示下载进度，并捕获下载过程中的成功或失败信息，最后统计并输出成功下载的文件数量。</p>\n<br> \n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/bighan1/p/18585402\">Python 使用 multiprocessing 实现多进程 - 博客园</a></li>\n<li><a href=\"https://developer.aliyun.com/article/1633222\">python 多进程一文够了！- 阿里云开发者社区</a></li>\n</ul>\n",
            "tags": [
                "编程日常"
            ]
        },
        {
            "id": "https://blog.jongsh.top/coding-diary/deep-learning-model-training-code/",
            "url": "https://blog.jongsh.top/coding-diary/deep-learning-model-training-code/",
            "title": "深度学习模型训练代码",
            "date_published": "2025-02-11T12:22:36.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>想来已经很久没有写博客了，趁着春节假期刚结束，我一时兴起，决定利用 DeepSeek 水一篇博客，既为之后的学习做个记录，也为眼前的毕业设计留下一些痕迹。</p>\n<p>这篇博客的主题是《深度学习模型训练代码》，顾名思义，主要讨论如何编写深度学习中的  <code>train.py</code>  文件。相信写过训练代码的人都知道， <code>train.py</code>  的基本逻辑大致相同：加载数据集、调用模型、计算损失、梯度优化、保存结果等。虽然听起来简单，但要写出一份既优雅整洁又功能完备的代码，还是需要费些功夫。既然如此，不如直接把这个框架搭建好，以后只要依葫芦画瓢，稍作调整即可。</p>\n<blockquote>\n<p>此博客将在后续实践中不断更新</p>\n</blockquote>\n<br> \n<h2 id=\"编写规范\"><a class=\"anchor\" href=\"#编写规范\">#</a> 编写规范</h2>\n<p>为了利用 DeepSeek 写一份好的训练代码框架，首先要列出认为好的编写规范和要求。于我个人而言，好的  <code>train.py</code>  代码实现应该要满足以下要求：</p>\n<p><strong>模块化设计</strong>：</p>\n<ul>\n<li>分离数据加载、模型构建、训练逻辑、日志记录等模块。</li>\n<li>函数职责清晰，便于调试和复用。</li>\n</ul>\n<p><strong>可配置性</strong>：</p>\n<ul>\n<li>从  <code>config.json</code>  配置文件加载默认参数。</li>\n<li>支持命令行参数覆盖配置。</li>\n<li>参数优先级：命令行 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">\\gt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span></span></span></span> 配置文件 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">\\gt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span></span></span></span> 代码默认值。</li>\n</ul>\n<p><strong>设备管理</strong>：</p>\n<ul>\n<li>自动检测 GPU 并分配设备。</li>\n</ul>\n<p><strong>可重复性</strong>：</p>\n<ul>\n<li>固定随机种子（控制  <code>random</code> ,  <code>numpy</code> ,  <code>torch</code>  等）。</li>\n<li>保存训练时的完整配置（备份  <code>config.json</code> ）。</li>\n</ul>\n<p><strong>日志与监控</strong>：</p>\n<ul>\n<li>记录训练过程中的损失、准确率等指标。</li>\n<li>保存日志文件和控制台输出。</li>\n<li>支持 TensorBoard 或 WandB 等可视化工具。</li>\n</ul>\n<p><strong>模型保存与恢复</strong>：</p>\n<ul>\n<li>定期保存模型检查点（权重、优化器状态）。</li>\n<li>支持从检查点恢复训练。</li>\n</ul>\n<p><strong>进度反馈</strong>：</p>\n<ul>\n<li>显示训练进度条（如  <code>tqdm</code> ）。</li>\n<li>打印每个 epoch 的指标摘要。</li>\n</ul>\n<p><strong>异常处理</strong></p>\n<ul>\n<li>处理文件路径不存在、参数不合法等问题。</li>\n<li>捕获键盘中断（Ctrl+C）并安全保存模型。</li>\n</ul>\n<br> \n<h2 id=\"代码框架\"><a class=\"anchor\" href=\"#代码框架\">#</a> 代码框架</h2>\n<p>基于上述要求，让 DeepSeek 给出详细的训练代码框架。</p>\n<h3 id=\"训练代码\"><a class=\"anchor\" href=\"#训练代码\">#</a> 训练代码</h3>\n<p>训练代码  <code>train.py</code>  主体内容如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># train.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> argparse</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">as</span> nn</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> DataLoader</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>tensorboard <span class=\"token keyword\">import</span> SummaryWriter</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># Define the model architecture based on the configuration</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">build_model</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    model <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"input_dim\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"hidden_dim\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"hidden_dim\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"output_dim\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> model</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># Load and preprocess the dataset</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">load_data</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    train_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    val_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> train_loader<span class=\"token punctuation\">,</span> val_loader</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># Parse command-line arguments</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">parse_args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    parser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--config\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">\"config.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"Path to the configuration file\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--lr\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"Learning rate (overrides config file)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--batch_size\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"Batch size (overrides config file)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--epochs\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"Number of epochs (overrides config file)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\"># Add other overridable parameters as needed...</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># Load the configuration file</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">load_config</span><span class=\"token punctuation\">(</span>config_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>config_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        config <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># Configure logging to both file and console</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">setup_logging</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    log_dir <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"log_dir\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span>log_dir<span class=\"token punctuation\">,</span> exist_ok<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    timestamp <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y%m%d_%H%M%S\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    log_file <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>log_dir<span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"train_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>timestamp<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.log\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    logging<span class=\"token punctuation\">.</span>basicConfig<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        level<span class=\"token operator\">=</span>logging<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">\"%(asctime)s [%(levelname)s] %(message)s\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        handlers<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            logging<span class=\"token punctuation\">.</span>FileHandler<span class=\"token punctuation\">(</span>log_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            logging<span class=\"token punctuation\">.</span>StreamHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\"># Train the model on the train set</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">train_model</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> train_loader<span class=\"token punctuation\">,</span> val_loader<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">,</span> writer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    optimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"lr\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    criterion <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\"># Resume training from a checkpoint if specified</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    start_epoch <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">if</span> config<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"resume_checkpoint\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        checkpoint <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"resume_checkpoint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        model<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>checkpoint<span class=\"token punctuation\">[</span><span class=\"token string\">\"model_state_dict\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        optimizer<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>checkpoint<span class=\"token punctuation\">[</span><span class=\"token string\">\"optimizer_state_dict\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        start_epoch <span class=\"token operator\">=</span> checkpoint<span class=\"token punctuation\">[</span><span class=\"token string\">\"epoch\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Resuming training from epoch </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>start_epoch<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start_epoch<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"epochs\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        model<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        train_loss <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        progress_bar <span class=\"token operator\">=</span> tqdm<span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">,</span> desc<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Epoch </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>epoch<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'epochs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">for</span> batch_idx<span class=\"token punctuation\">,</span> batch <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>progress_bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            inputs<span class=\"token punctuation\">,</span> labels <span class=\"token operator\">=</span> batch</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            inputs<span class=\"token punctuation\">,</span> labels <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            outputs <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            loss <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            train_loss <span class=\"token operator\">+=</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            progress_bar<span class=\"token punctuation\">.</span>set_postfix<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"loss\"</span><span class=\"token punctuation\">:</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token comment\"># Log training loss to TensorBoard</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            writer<span class=\"token punctuation\">.</span>add_scalar<span class=\"token punctuation\">(</span><span class=\"token string\">\"Loss/train\"</span><span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> epoch <span class=\"token operator\">*</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> batch_idx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token comment\"># Validation step</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        val_loss<span class=\"token punctuation\">,</span> val_acc <span class=\"token operator\">=</span> validate<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> val_loader<span class=\"token punctuation\">,</span> criterion<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token string-interpolation\"><span class=\"token string\">f\"Epoch </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>epoch<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: \"</span></span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token string-interpolation\"><span class=\"token string\">f\"Train Loss: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>train_loss<span class=\"token operator\">/</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.4f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, \"</span></span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token string-interpolation\"><span class=\"token string\">f\"Val Loss: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>val_loss<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.4f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, Val Acc: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>val_acc<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.4f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\"># Log validation metrics to TensorBoard</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        writer<span class=\"token punctuation\">.</span>add_scalar<span class=\"token punctuation\">(</span><span class=\"token string\">\"Loss/val\"</span><span class=\"token punctuation\">,</span> val_loss<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        writer<span class=\"token punctuation\">.</span>add_scalar<span class=\"token punctuation\">(</span><span class=\"token string\">\"Accuracy/val\"</span><span class=\"token punctuation\">,</span> val_acc<span class=\"token punctuation\">,</span> epoch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\"># Save checkpoint periodically</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"save_interval\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            checkpoint_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"checkpoint_dir\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"model_epoch_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>epoch<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.pt\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token string\">\"epoch\"</span><span class=\"token punctuation\">:</span> epoch<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                <span class=\"token string\">\"model_state_dict\"</span><span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token string\">\"optimizer_state_dict\"</span><span class=\"token punctuation\">:</span> optimizer<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> checkpoint_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token comment\"># Evaluate the model on the validation set</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> val_loader<span class=\"token punctuation\">,</span> criterion<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    total_loss <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    correct <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">with</span> torch<span class=\"token punctuation\">.</span>no_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">for</span> batch <span class=\"token keyword\">in</span> val_loader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            inputs<span class=\"token punctuation\">,</span> labels <span class=\"token operator\">=</span> batch</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            inputs<span class=\"token punctuation\">,</span> labels <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            outputs <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            loss <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            total_loss <span class=\"token operator\">+=</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            preds <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            correct <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>preds <span class=\"token operator\">==</span> labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">return</span> total_loss <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>val_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> correct <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>val_loader<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token comment\"># Main function</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\"># Parse command-line arguments</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    args <span class=\"token operator\">=</span> parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    config <span class=\"token operator\">=</span> load_config<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token comment\"># Override config with command-line arguments</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token builtin\">vars</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token keyword\">if</span> value <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> key <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            config<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token comment\"># Validate required configuration keys (optional)</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    required_keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"input_dim\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hidden_dim\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"output_dim\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lr\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"batch_size\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> required_keys<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token keyword\">if</span> key <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Missing required key in config: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token comment\"># Initialize logging, device, and random seed</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    setup_logging<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    device <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda\"</span> <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    torch<span class=\"token punctuation\">.</span>manual_seed<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"seed\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token comment\"># Initialize TensorBoard writer</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    writer <span class=\"token operator\">=</span> SummaryWriter<span class=\"token punctuation\">(</span>log_dir<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"log_dir\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tensorboard\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token comment\"># Build the model and load data</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    model <span class=\"token operator\">=</span> build_model<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    train_loader<span class=\"token punctuation\">,</span> val_loader <span class=\"token operator\">=</span> load_data<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token comment\"># Log model graph to TensorBoard (optional)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    sample_input <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>add_graph<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> sample_input<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token comment\"># Start training</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        train_model<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> train_loader<span class=\"token punctuation\">,</span> val_loader<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">,</span> writer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"Training interrupted. Saving the latest model...\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"checkpoint_dir\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"interrupted.pt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token comment\"># Close TensorBoard writer</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        writer<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"Training completed!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h3>\n<p>配置文件  <code>config.json</code>  的示例如下，注意 json 的键不能嵌套：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># config.json</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"input_dim\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">784</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">\"hidden_dim\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">\"output_dim\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"lr\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">\"batch_size\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">\"epochs\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">\"seed\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string\">\"log_dir\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./logs\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">\"checkpoint_dir\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./checkpoints\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token string\">\"save_interval\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法</h3>\n<p>使用默认配置文件运行训练脚本：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python train.py <span class=\"token parameter variable\">--config</span> config.json</pre></td></tr></table></figure><p>通过命令行参数覆盖配置文件中的值。例如，修改学习率和  <code>batch size</code> ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python train.py <span class=\"token parameter variable\">--config</span> config.json <span class=\"token parameter variable\">--lr</span> <span class=\"token number\">0.01</span> <span class=\"token parameter variable\">--batch_size</span> <span class=\"token number\">128</span></pre></td></tr></table></figure><p>如果需要从某个检查点恢复训练，可以在  <code>config.json</code>  中添加  <code>resume_checkpoint</code>  参数，或者通过命令行指定：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python train.py <span class=\"token parameter variable\">--config</span> config.json <span class=\"token parameter variable\">--resume_checkpoint</span> ./checkpoints/model_epoch_10.pt</pre></td></tr></table></figure><p>训练过程中，TensorBoard 日志会保存在  <code>./logs/tensorboard</code>  目录下。启动 TensorBoard 查看可视化结果：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tensorboard <span class=\"token parameter variable\">--logdir</span><span class=\"token operator\">=</span>./logs/tensorboard</pre></td></tr></table></figure><p>然后在浏览器中访问  <code>http://localhost:6006</code> ，即可查看训练和验证的损失、准确率等指标。</p>\n<p>运行脚本后，生成的文件结构如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├── logs/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│   ├── train_20231025_153000.log  <span class=\"token comment\"># 训练日志</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│   └── tensorboard/               <span class=\"token comment\"># TensorBoard 日志</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>├── checkpoints/</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│   ├── model_epoch_5.pt           <span class=\"token comment\"># 模型检查点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>│   └── model_epoch_10.pt</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>└── config.json                    <span class=\"token comment\"># 配置文件</span></pre></td></tr></table></figure>",
            "tags": [
                "编程日常"
            ]
        },
        {
            "id": "https://blog.jongsh.top/learning-note/frontend-development/vue3-project-build-guide/",
            "url": "https://blog.jongsh.top/learning-note/frontend-development/vue3-project-build-guide/",
            "title": "Vue3 项目构建指南",
            "date_published": "2024-09-17T05:14:06.000Z",
            "content_html": "<blockquote>\n<p>在前端开发领域，Vue 框架无疑是一个重要的角色。然而，每次创建和初始化 Vue 项目时，我总是要一边查阅文档和浏览器一边配置。这主要是因为为了完整地初始化一个 Vue 项目，往往需要考虑其他组件的使用和配置等细节。因此，我写下这篇博客，主要是依据我个人的开发习惯，整理了 Vue3 项目的构建和配置流程，望一劳永逸～</p>\n</blockquote>\n<h2 id=\"基本配置\"><a class=\"anchor\" href=\"#基本配置\">#</a> 基本配置</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<p>依据我的个人习惯，下面给出构建 Vue3 项目时的包管理器和创建方式。</p>\n<p><strong>包管理器</strong>：常见的包管理器有 npm、yarn 和 pnpm，使用哪一个都可以方便地满足 Vue 项目的构建和开发需求。对于我个人而言，更偏向于选择使用 pnpm 来管理 JavaScript 包，原因很简单，一个字 —— 快，可以参考这篇<a href=\"https://blog.csdn.net/qq_23730073/article/details/135850470\">博客</a>。</p>\n<p>使用 pnpm，首先需要全局安装，命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> <span class=\"token function\">pnpm</span></pre></td></tr></table></figure><p>安装后，就可以在项目中使用 pnpm 命令来代替 npm 命令了。</p>\n<p><strong>创建方式</strong>：Vue 项目一般有两种创建方式，分别是 Vue 脚手架和 Vite，后者的开发启动速度和构建速度效率都远高于前者，也是目前是 Vue 3 官方推荐的构建工具。关于这两种方式的操作方法，这里也留个<a href=\"https://blog.csdn.net/weixin_69553582/article/details/129630880\">传送门</a>，本篇博客仅整理 Vite 的构建方式。</p>\n<h3 id=\"构建项目\"><a class=\"anchor\" href=\"#构建项目\">#</a> 构建项目</h3>\n<p>在需要创建 Vue 项目的目录下打开终端，使用下述命令初始化构建项目：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> create vite@latest your-project -- <span class=\"token parameter variable\">--vue</span></pre></td></tr></table></figure><p>其中  <code>your-project</code>  是项目名，根据需要更改。</p>\n<p>第一次使用 Vite 创建 Vue 项目并且未安装过 Vite 脚手架的包，则会提示进行安装，输入  <code>y</code>  等待 Vite 包安装完成。</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202409/202409301650549.png?x-oss-process=image/format,webp\" alt=\"vite+vue\" title=\"vite+vue\" /></p>\n<p>接着选择需要的框架（Vue）并自定义配置：</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202409/202409301724468.png?x-oss-process=image/format,webp\" alt=\"vite+vue\" title=\"vite+vue\" height=\"80%\" width=\"80%\" /></p>\n<p>以上仅是个人习惯的配置，请根据需要自行调整。</p>\n<p>根据提示，进入到目录中，下载需要的依赖包，并运行 Vue 项目：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> your-project</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">format</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">pnpm</span> run dev</pre></td></tr></table></figure><p>此时可以明显地感觉到 pnpm 管理 JS 包以及 Vite 构建项目的便捷和高效了。</p>\n<h3 id=\"集成-eslint-和-prettier\"><a class=\"anchor\" href=\"#集成-eslint-和-prettier\">#</a> 集成 ESLint 和 Prettier</h3>\n<p>在 Vue 3 项目中配置 ESLint 和 Prettier 可以统一代码风格，实现代码规范性与可读性的提升。通过设置规则、解决冲突、以及将配置融入持续集成流程和代码审查过程，确保团队协作时代码风格的一致性，提升开发效率与项目维护性。</p>\n<p>如果严格按照上面的步骤构建好 Vue3 项目，此时项目中已经包含了所需的所有依赖：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"@rushstack/eslint-patch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.8.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"@vitejs/plugin-vue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.0.5\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"@vitejs/plugin-vue-jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"@vue/eslint-config-prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^9.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^8.57.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">\"eslint-plugin-vue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^9.23.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">\"prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.2.5\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token property\">\"vite\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.3.1\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着，确保使用的编辑器安装好了对应的插件，对于 Vscode 而言就是 ESLint 和 Prettier 插件。</p>\n<p>在项目根目录下，可以看到两个文件： <code>.eslintrc.cjs</code>  和  <code>.prettierrc.json</code> ，分别对应 ESLint 和 Prettier 的配置，同时配置好 Vscode 的 &quot;Format On Save&quot;。</p>\n<p>以下是这两个文件最基本的配置，主要是我用来格式化代码的，更加复杂的配置需求，需自行查阅官方文档或相关教程：</p>\n<ul>\n<li>\n<p><code>.eslintrc.cjs</code> ：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"plugin:vue/vue3-essential\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"@vue/eslint-config-prettier/skip-formatting\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">parserOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token literal-property property\">ecmaVersion</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>.prettierrc.json</code> ：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://json.schemastore.org/prettierrc\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"tabWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"useTabs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"jsxSingleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"quoteProps\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"consistent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">\"trailingComma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"bracketSpacing\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"jsxBracketSameLine\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">\"arrowParents\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">\"requirePragma\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">\"insertPragma\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">\"endOfLine\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<br> \n<h2 id=\"外部组件\"><a class=\"anchor\" href=\"#外部组件\">#</a> 外部组件</h2>\n<p>除了基本配置外，在工程项目中，往往还需要使用到外部组件和依赖，来提高编程效率。此小节就对我常用的一些外部组件的配置进行整理。</p>\n<h3 id=\"axios\"><a class=\"anchor\" href=\"#axios\">#</a> Axios</h3>\n<p>Axios 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 node.js 环境。它提供了一个简单而统一的 API，用于向 HTTP 服务器发送请求。Axios 用 JavaScript 编写的，并且是开源的，因此在前端开发社区中非常流行，几乎已经成为了前端开发必不可少的工具。</p>\n<ul>\n<li>\n<p>首先安装 Axios：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> axios</pre></td></tr></table></figure></li>\n<li>\n<p>在 Vue 项目  <code>src</code>  目录下新建  <code>utils</code>  目录，创建  <code>request.js</code>  文件来封装 axios 模块，然后利用  <code>axios.create</code>  创建一个自定义的 axios 对象来使用。代码的基本框架如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://www.example.com/api/'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// TODO 1. 基础地址，超时时间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// TODO 2. 携带 token</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// TODO 3. 处理业务失败</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// TODO 4. 摘取核心响应数据</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// TODO 5. 处理 401 错误</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> instance</pre></td></tr></table></figure><p>更多的配置内容可以依据开发需求以及这篇<a href=\"http://www.axios-js.com/zh-cn/docs/\"> axios 中文文档</a> 来实现。</p>\n</li>\n<li>\n<p>最后，在 JavaScript 代码中导入上述文件中创建好的 axios 对象来完成 HTTP 接口请求服务功能。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// api/user.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/request'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">userRegisterService</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> repassword <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  request<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/register'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> repassword <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"element-plus\"><a class=\"anchor\" href=\"#element-plus\">#</a> Element Plus</h3>\n<p><a href=\"https://element-plus.org/\">Element Plus</a> 是一个基于 Vue 3 的高质量 UI 组件库。它包含了丰富的组件和扩展功能，例如表格、表单、按钮、导航、通知等，让开发者能够快速构建高质量的 Web 应用。Element Plus 的设计理念是：提供开箱即用的 UI 组件和扩展功能，帮助开发者快速构建应用程序，同时提供详细的文档和教程，让开发者更好地掌握和使用 Element Plus。</p>\n<p><strong>这一小节内容是从官方文档摘录整理出来的，有需要请自行查阅官方文档。</strong></p>\n<p>首先是在 Vue 项目中安装 element-plus 组件库，只需要键入下面命令即可：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> element-plus</pre></td></tr></table></figure><p>在 JavaScript 文件中使用 Element Plus 提供的服务，需要按照如下示例导入：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// example</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ElMessage <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'element-plus'</span></pre></td></tr></table></figure><p>接着是如何在项目（Vue 文件）中使用 Element Plus 提供的各类组件，主要有如下三种方法。</p>\n<h4 id=\"完整导入\"><a class=\"anchor\" href=\"#完整导入\">#</a> 完整导入</h4>\n<p>如果对打包后的文件大小不是很在乎，那么可以在  <code>main.js</code>  文件下全局注册导入组件。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ElementPlus <span class=\"token keyword\">from</span> <span class=\"token string\">'element-plus'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'element-plus/dist/index.css'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>ElementPlus<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>之后在代码中就可以直接使用所需的组件了。</p>\n<p>这种方式简单方便，但如果项目中不需要所有组件，可能会导致最终打包体积较大。</p>\n<h4 id=\"按需导入\"><a class=\"anchor\" href=\"#按需导入\">#</a> 按需导入</h4>\n<p>使用插件如  <code>unplugin-vue-components</code>  和  <code>unplugin-auto-import</code>  来实现组件的自动导入，这样可以减小打包体积。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> unplugin-vue-components unplugin-auto-import</pre></td></tr></table></figure><p>然后修改项目根目录下的  <code>vite.config.js</code>  文件：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// vite.config.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> AutoImport <span class=\"token keyword\">from</span> <span class=\"token string\">'unplugin-auto-import/vite'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Components <span class=\"token keyword\">from</span> <span class=\"token string\">'unplugin-vue-components/vite'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ElementPlusResolver <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'unplugin-vue-components/resolvers'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">AutoImport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token literal-property property\">resolvers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlusResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">Components</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">resolvers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlusResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这种方式也可以在代码中直接使用所需的组件，虽然需要配置额外的插件，但可以有效地减少最终的打包体积。</p>\n<h4 id=\"手动导入\"><a class=\"anchor\" href=\"#手动导入\">#</a> 手动导入</h4>\n<p>最后一种方法是手动导入，由于相对繁琐，<strong>基本不会采用</strong>，这里只做简单介绍。</p>\n<p>首先安装 <a href=\"https://github.com/element-plus/unplugin-element-plus\">unplugin-element-plus</a> 来导入样式。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> unplugin-element-plus</pre></td></tr></table></figure><p>在 Vue 文件中手动导入需要使用的组件：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span><span class=\"token punctuation\">></span></span>我是 ElButton<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ElButton <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'element-plus'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> ElButton <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>同时在  <code>vite.config.js</code>  文件中添加如下内容：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// vite.config.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> ElementPlus <span class=\"token keyword\">from</span> <span class=\"token string\">'unplugin-element-plus/vite'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><div class=\"note warning\">\n<p>如果使用  <code>unplugin-element-plus</code>  并且只使用组件 API，则需要手动导入样式。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'element-plus/es/components/message/style/css'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ElMessage <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'element-plus'</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "学习笔记",
                "前端开发"
            ]
        },
        {
            "id": "https://blog.jongsh.top/announcement/",
            "url": "https://blog.jongsh.top/announcement/",
            "title": "网站迁移完成",
            "date_published": "2024-09-10T12:40:21.000Z",
            "content_html": "<p><strong>网站的部署和美化以及博客数据的转移都已全部完成啦！</strong></p>\n<br/>\n<h2 id=\"历史公告\"><a class=\"anchor\" href=\"#历史公告\">#</a> 历史公告</h2>\n<details class=\"success\"><summary>2024-9-1 网站迁移有序进行中...</summary><div>\n<p>小屋博客正在努力迁移中，预计在近期完成优化和部署。</p>\n</div></details>\n",
            "tags": []
        },
        {
            "id": "https://blog.jongsh.top/coding-diary/weibo-poi-crawler/",
            "url": "https://blog.jongsh.top/coding-diary/weibo-poi-crawler/",
            "title": "微博 POI 数据爬取",
            "date_published": "2024-07-28T05:18:50.000Z",
            "content_html": "<p>POI (Point of Interest，兴趣点)，通常指的是在地理信息系统、地图应用程序或导航系统中的特定地点。兴趣点可以是自然景观、历史遗迹、文化地标、餐馆、商店、娱乐场所等。</p>\n<p>前段时间，实验室的学长给我派活，内容大概是爬取一些 POI 数据，包括经纬度和文本描述信息。在此之前，我从未接触过爬虫相关的知识，所以这算是我第一次经历。虽然任务内容不多，但是我还是花费了些功夫，翻阅了许多资料，最终勉强写了个半成品。这里简单记录下这次的学习过程，也方便日后翻阅复习。</p>\n<h2 id=\"数据来源\"><a class=\"anchor\" href=\"#数据来源\">#</a> 数据来源</h2>\n<h3 id=\"poi-文本数据\"><a class=\"anchor\" href=\"#poi-文本数据\">#</a> POI 文本数据</h3>\n<p>获取 POI 的地理坐标并非难点，众多来源如高德地图和百度地图提供的 API 服务均可实现。然而，获取 POI 的文本描述信息则显得相对复杂。例如，一所大学的文本描述在网络上容易找到，但对于餐饮店或商业楼宇等其他类型的地点，直接从网络中获取相关信息则较为困难。</p>\n<p>鉴于此，我开始探索主流的应用程序作为潜在的数据来源。首先，我考察了大众点评，考虑到其在人们日常生活中的普遍使用，它似乎是一个理想的选择。然而，我发现该平台主要提供用户评价，而缺乏对大多数 POI 的详细描述。随后，我对美团和高德地图等其他平台也进行了调研，但结果同样不尽如人意。犯了难的我只好求助学长，他提醒我考虑微博的数据资源，这是我之前由于个人习惯而忽略的一个平台。于是我连忙注册账号并登录微博，进行了一番搜索，发现了这样的页面：</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202407/202407252221644.png?x-oss-process=image/format,webp\" alt=\"poi文本网页\" title=\"poi文本网页\" height=\"80%\" width=\"80%\" /></p>\n<p>网页上提供的简介似乎正是我寻求的 POI 文本信息。然而，在进一步考察其他地点后，我注意到，对于一般商店和楼宇，所提供的简介通常仅限于类型和地点，不够丰富。在与学长进一步确认后，我们认定微博上的文本数据虽不完美，但也具有一定的适用性。至此，POI 文本数据的来源算是最终确定下来。</p>\n<h3 id=\"poi-地理坐标\"><a class=\"anchor\" href=\"#poi-地理坐标\">#</a> POI 地理坐标</h3>\n<p>最难的 POI 文本数据来源已经解决，我接下来转向了 POI 的地理坐标问题。在页面上，我注意到了一个地图展示功能，这通常意味着背后有服务 API 的支持。依据我的开发经验，为了实现地图坐标对特定 POI 的精确定位，经纬度信息是必不可少的。于是我点击进入了 &quot;地图模式&quot; 页面，并运用浏览器的开发者工具进行分析，确认页面确实包含了所需的 POI 经纬度信息。</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202407/202407252230342.png?x-oss-process=image/format,webp\" alt=\"地图页\" title=\"地图页\" /></p>\n<p>此外，我还注意到页面左侧的搜索框。测试验证了该关键字搜索接口也能提供 POI 地理位置数据，且数据量更丰富，使用更简便。因此，我决定采用此接口来爬取经纬度数据。</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202407/202407252231816.png?x-oss-process=image/format,webp\" alt=\"关键字搜索接口\" title=\"关键字搜索接口\" height=\"80%\" width=\"80%\" /></p>\n<br> \n<h2 id=\"爬取流程\"><a class=\"anchor\" href=\"#爬取流程\">#</a> 爬取流程</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<p>确定了数据来源后，爬取流程也得以确定。分析包含文本数据的页面 URL，我发现 URL 中某些部分是相同的，只有最后的字符串与每个 POI 唯一关联。这个唯一的字段一般而言就是 POI 的 ID，而关键字搜索接口返回的数据中恰好包括了这个字段。因此，每个 POI 对应的页面 URL 可以表示成：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>weibo<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>p<span class=\"token operator\">/</span><span class=\"token number\">100101</span><span class=\"token punctuation\">&#123;</span>poiid<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因此可以总结如下的爬取流程：</p>\n<ul>\n<li>依据需要爬取的 POI 名称，利用关键字搜索接口返回数据。</li>\n<li>保存接口返回的 POI 数据，其中包括了经纬度信息与 POIID。</li>\n<li>利用 POIID 拼接对应的页面 URL，构造请求获取页面内容。</li>\n<li>从页面内容中解析出需要的简介文本。</li>\n</ul>\n<h3 id=\"模拟登录\"><a class=\"anchor\" href=\"#模拟登录\">#</a> 模拟登录</h3>\n<p>多数网站会对用户个人信息作检测。而上面我用到的几个页面都需要登录才放行。编写爬虫时，需要先准备网站 cookies 来模拟登录状态。最简单的方法是登录微博，查看并保存 cookies 信息，然后在构造请求时添加。</p>\n<p>这里我还使用了  <code>selenium</code>  库实现另一种获取 cookies 的方法，相比前一种方法略显复杂，而且还用到了 chrome 拓展（chrome 拓展安装教程<a href=\"https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2FZ_Lisa%2Farticle%2Fdetails%2F133307151\">传送门</a>）。由于这种方法比较麻烦，这里就简单地贴出代码，不再详细说明。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver  <span class=\"token comment\"># 导入 Selenium 的 webdriver 模块，用于浏览器自动化控制</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    browser <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 初始化一个 Chrome 浏览器实例</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    log_url <span class=\"token operator\">=</span> <span class=\"token string\">'https://passport.weibo.com/sso/signin?entry=miniblog&amp;source=miniblog&amp;disp=popup&amp;url=https%3A%2F%2Fweibo.com%2Fnewlogin%3Ftabtype%3Dweibo%26gid%3D102803%26openLoginLayer%3D0%26url%3D'</span>  <span class=\"token comment\"># 定义微博登录页面的 URL</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    browser<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>log_url<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 使用 webdriver 打开微博登录页面</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 等待 45 秒，以便手动登录</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cookies_list <span class=\"token operator\">=</span> browser<span class=\"token punctuation\">.</span>get_cookies<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取当前浏览器会话的所有 cookies</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cookies_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>cookie<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> cookie<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> cookie <span class=\"token keyword\">in</span> cookies_list<span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># 将 cookies 列表转换成字典格式</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'config\\weibo_cookies.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>cookies_dict<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将 cookies 字典以 JSON 格式写入文件</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cookies保存成功！'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"save cookies failed: \"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    browser<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 关闭浏览器</span></pre></td></tr></table></figure><p>将 cookie 信息用 JSON 格式保存下来后，就可以在  <code>request</code>  请求时使用了。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'config/weibo_cookies.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cookies_dict <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 用户 cookies</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>search_url<span class=\"token punctuation\">,</span> cookies<span class=\"token operator\">=</span>cookies_dict<span class=\"token punctuation\">)</span> <span class=\"token comment\"># example</span></pre></td></tr></table></figure><h3 id=\"遍历-poi-地点\"><a class=\"anchor\" href=\"#遍历-poi-地点\">#</a> 遍历 POI 地点</h3>\n<p>如何高效地遍历并获取所有 POI 名称几乎是整个项目中最麻烦的部分，甚至于到现在都没能取得比较满意的效果。之前我已确定了爬取 POI 所有数据的来源，但是如何遍历获取 POI 名称反而成了最棘手的问题。</p>\n<p>刚开始，我尝试通过地名细分进行关键字搜索，但很快发现微博的接口似乎是以 POI 名称作为匹配依据的，而大多数 POI 名称并不包含地名信息。后来我又分析，发现 POIID 的前半部分似乎是相同的，这让我猜测 POIID 可能根据地区进行区分。基于这一假设，我尝试通过遍历 POIID 来获取北京市的数据。然而，经过多次测试，我发现 POIID 并不连续，且存在大量空 ID 的情况，不同地区的 ID 也可能相互混杂，这严重影响了遍历的效果。之后我考虑了微博开放平台提供的 API，遇到了收费 800 元的博主。最终，我在这个 <a href=\"https://github.com/wanzixin/SinaWeibo-LocationSignIn-spider\">GitHub 仓库</a> 中找到了启发。</p>\n<p>综合考量了经济，效率等条件，我选择了一种与上述仓库类似的遍历策略。分析微博页面 <a href=\"https://m.weibo.cn/p/index?containerid=2304410027_&amp;extparam=8008611000000000000\">https://m.weibo.cn/p/index?containerid=2304410027_&amp;extparam=8008611000000000000</a> ，我很快找到了返回数据的接口，用于爬取 POI 名称。我发现地标和美食两个板块的数据接口只有一个参数值不同，取值规则也与仓库中提到的一致。后续再利用关键字搜索去获取更多的数据，形成完整的爬取思路。</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202407/202407281234506.jpg?x-oss-process=image/format,webp\" alt=\"遍历POI\" title=\"遍历POI\" height=\"80%\" width=\"80%\" /></p>\n<p>基于此，我将遍历的过程封装成  <code>get_poi_list</code>  函数，代码如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'config/landmark_params.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    landmark_params <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \t<span class=\"token comment\"># poi 遍历地标接口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'config/restaurant_params.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    restaurant_params <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># poi 遍历美食接口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>poi_list_url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://m.weibo.cn/api/container/getIndex\"</span>  <span class=\"token comment\"># 微博 poi 遍历接口</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_poi_list</span><span class=\"token punctuation\">(</span>category<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> page<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        category=1: 地标</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        category=2: 美食</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> category <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        landmark_params<span class=\"token punctuation\">[</span><span class=\"token string\">'page'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> page</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>poi_list_url<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>landmark_params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">elif</span> category <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        restaurant_params<span class=\"token punctuation\">[</span><span class=\"token string\">'page'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> page</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>poi_list_url<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>restaurant_params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        groups <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cards\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"card_group\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">[</span><span class=\"token string\">'title_sub'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> group <span class=\"token keyword\">in</span> groups<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> lst</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>但是这种遍历方法的缺点在于，这些页面提供的 POI 数据量并不大，比如北京只有 5000 条左右，加上关键字搜索提供的额外数据，也只有一万多条数据。因此，如何优化这一部分，是该项目后续改进的重点方向之一。</p>\n<h3 id=\"收集经纬度与-id-信息\"><a class=\"anchor\" href=\"#收集经纬度与-id-信息\">#</a> 收集经纬度与 ID 信息</h3>\n<p>通过微博的关键词搜索接口，可以获取 POI 的 ID、名称以及相应的地理坐标（经纬度）等信息。这些信息被保存在请求响应的 &quot;pois&quot; 字段中。但是我测试时发现，仅使用  <code>keyword</code>  参数和 cookies 调用此接口无法成功，还需额外添加请求头信息。于是我将请求头从浏览器中复制下来保存到本地文件，在代码运行开始时读取。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'config/headers.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    search_headers <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>接下来，定义一个  <code>search_by_keyword</code>  函数，该函数封装了使用关键词进行搜索的逻辑：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">search_by_keyword</span><span class=\"token punctuation\">(</span>keyword<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>search_url<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'keyword'</span><span class=\"token punctuation\">:</span> keyword<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>search_headers<span class=\"token punctuation\">,</span> cookies<span class=\"token operator\">=</span>cookies_dict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'关键字\\'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>keyword<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\'搜索到</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"pois\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">条数据'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'pois'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'No results found for keyword \\'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>keyword<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\'.'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'An error occurred during the search for keyword \\'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>keyword<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\': </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>此函数首先使用给定的关键词发起 GET 请求，并将返回的数据解析为 JSON 格式。如果请求成功，则返回这些 POI 信息。如果搜索没有返回任何结果，或者在请求过程中发生异常，则返回一个空列表。</p>\n<h3 id=\"收集文本描述数据\"><a class=\"anchor\" href=\"#收集文本描述数据\">#</a> 收集文本描述数据</h3>\n<p>利用关键词搜索接口获取的数据包含了 POIID、经纬度等关键信息。通过 POIID 可以构造出对应的微博页面 URL。经过一番探索，我发现 POI 微博页面的简介信息是通过 HTTP 接口以 HTML、CSS 和 JavaScript 资源的形式返回的。因此，可以应用<strong>正则表达式</strong>对获取的数据进行匹配，以截取并拼接出完整的文本描述。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_poi_text</span><span class=\"token punctuation\">(</span>poi_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    target_url <span class=\"token operator\">=</span> poi_text_base_url <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>poi_id<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 构造目标网页 URL</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    pattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'&lt;p class=\"p_txt\">(.*?)&lt;/p>'</span><span class=\"token punctuation\">,</span> re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    matches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>target_url<span class=\"token punctuation\">,</span> cookies<span class=\"token operator\">=</span>cookies_dict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        matches <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Error retrieving text for POI ID </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>poi_id<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>text_matches<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>本来这个函数这么写就已经完成了，然而，在程序运行一段时间后，我发现一大部分数据缺失了文本描述，但程序仍在继续执行。经分析，这可能是由于微博对频繁访问的 IP 实施了访问限制。每次通过接口获取 POIID 后，对页面的访问相当于一次页面请求，因此容易被微博识别并限制。</p>\n<p>解决此问题的方法之一是使用 IP 代理池，从代理服务获取不同的 IP 地址，并在访问时携带这些代理 IP。通过定期更换代理 IP，可以降低被服务器识别和限制的风险。即使某个 IP 被限制，也可以迅速切换到另一个。</p>\n<p>想法是很美好的，但是现实却是，在我调研学习了编写代理池的方法后，尝试了几个<strong>免费</strong>的代理服务商提供的 IP，全部都被微博拦截，导致根本请求不到任何数据。无奈之下，我选择了最简单的等待策略：当检测到 IP 被限制时，程序将等待一段时间后再次尝试，通常等待约 5 分钟后 IP 会被解封。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> times <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>target_url<span class=\"token punctuation\">,</span> cookies<span class=\"token operator\">=</span>cookies_dict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        matches <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> matches<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>matches<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"No text found for POI ID </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>poi_id<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> on attempt </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>times<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Attempt </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>times<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> failed for POI ID </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>poi_id<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">80</span> <span class=\"token operator\">*</span> times<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"保存数据\"><a class=\"anchor\" href=\"#保存数据\">#</a> 保存数据</h3>\n<p>上述方法已经可以完整地获取所需的 POI 数据，现在只需要在主体函数中组合上述方法形成完整的爬取流程即可。</p>\n<p>因为遍历 POI 时用到的页面包括地标和美食两个板块，用到的参数有所不同，所以爬取过程也是按照这两块内容分别爬取，但爬取的逻辑是一致的，可以代码复用。</p>\n<p>除此之外，接口调用需要传入页面参数，所以维护一个页面数据结构来跟踪当前的页面状态。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>page <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token string\">\"landmark\"</span><span class=\"token punctuation\">:</span> landmark_params<span class=\"token punctuation\">[</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token string\">\"restaurant\"</span><span class=\"token punctuation\">:</span> restaurant_params<span class=\"token punctuation\">[</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>page</code>  参数会随程序运行而动态更新，但是程序运行时间可能很长，还有可能因各种情况意外终止。为了避免每次运行程序都从第一页开始爬取，这个数据需要时不时更新到文件中。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">save_params</span><span class=\"token punctuation\">(</span>landmark_page<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> restaurant_page<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    landmark_params<span class=\"token punctuation\">[</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> landmark_page</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    restaurant_params<span class=\"token punctuation\">[</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> restaurant_page</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'config/restaurant_params.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>restaurant_params<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'config/landmark_params.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>landmark_params<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在准备工作完成后，接着编写爬虫的主体逻辑。首先使用  <code>get_poi_list</code>  函数获取 POI 的名称列表，然后遍历调用  <code>search_by_keyword</code>  函数获取基本的数据，接着调用  <code>get_poi_text</code>  函数获取文本，最后将数据保存到文件中。</p>\n<p>考虑到数据存在重复的可能，比如关键字 A 搜索出来的结果包括兴趣点 P，而关键字 B 搜索出来的结果也包含 P，此时没有必要获取两次 P 的文本数据，因此每次调用  <code>get_poi_text</code>  函数前需要先判断 POI 数据是否已经在文件中。此外，如果每次获取一个 POI 的数据就写入文件，会导致程序 I/O 过多，效率降低。因此我选择将一个关键字搜索出来了一系列数据一次性写入文件。</p>\n<p>综上可以封装以下两个函数：</p>\n<ul>\n<li><code>write_csv</code>  接受数据并去重，然后调用  <code>get_poi_text</code>  补充文本数据，最后写入文件中；</li>\n<li><code>save_by_keywords</code>  将关键字搜索，文本数据爬取和文件写入的过程再进行一次封装以方便  <code>main</code>  函数调用。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>unique_rows <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 数据文件唯一标识集合</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    reader <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> reader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        unique_rows<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">write_csv</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> newline<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'longitude'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'latitude'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'address'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        writer <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>DictWriter<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> fieldnames<span class=\"token operator\">=</span>fields<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">[</span><span class=\"token string\">'poiid'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> unique_rows<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    writer<span class=\"token punctuation\">.</span>writerow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">[</span><span class=\"token string\">'poiid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token string\">'longitude'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">[</span><span class=\"token string\">'lon'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        <span class=\"token string\">'latitude'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">[</span><span class=\"token string\">'lat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token string\">'address'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">[</span><span class=\"token string\">'address'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token string\">'text'</span><span class=\"token punctuation\">:</span> get_poi_text<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">'poiid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write to CSV ERROR\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">save_by_keywords</span><span class=\"token punctuation\">(</span>keywords<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> keywords <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span> keyword <span class=\"token keyword\">in</span> keywords<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        data <span class=\"token operator\">=</span> search_by_keyword<span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        write_csv<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在  <code>main</code>  函数中，循环获取 POI 列表，调用  <code>save_by_keywords</code>  爬取数据并保存。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    page <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"landmark\"</span><span class=\"token punctuation\">:</span> landmark_params<span class=\"token punctuation\">[</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"restaurant\"</span><span class=\"token punctuation\">:</span> restaurant_params<span class=\"token punctuation\">[</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    categories <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'landmark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'restaurant'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> category<span class=\"token punctuation\">,</span> name <span class=\"token keyword\">in</span> categories<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        res <span class=\"token operator\">=</span> get_poi_list<span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span> res<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            save_by_keywords<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            page<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            res <span class=\"token operator\">=</span> get_poi_list<span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            save_params<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">[</span><span class=\"token string\">'landmark'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">[</span><span class=\"token string\">'restaurant'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"数据清洗\"><a class=\"anchor\" href=\"#数据清洗\">#</a> 数据清洗</h3>\n<p>由于一开始爬取数据时我没有考虑到 IP 会被 ban 的情况，导致中间爬取的很多数据都缺少了文本描述。因此我编写了  <code>clean.py</code>  文件来处理这些不完整的数据项。</p>\n<p>这部分的逻辑相对比较简单，即读取 CSV 文件中的每一列，检出不完整有的部分，重现调用上面的函数再做一次爬取。但是由于文件不好在特定位置写入，于是我干脆将原先的  <code>data.csv</code>  数据全部读出并做数据清洗，将新的完整的数据写入  <code>new_data.csv</code>  文件中。</p>\n<p>整理整个代码流程可以分成如下步骤</p>\n<ol>\n<li>\n<p>定义  <code>write_to_new_csv</code>  函数负责将数据追加写入新数据文件。这部分内容与之前爬取数据存入是类似的</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">write_to_new_csv</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>new_file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> newline<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> file2<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            writer <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>writer<span class=\"token punctuation\">(</span>file2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                writer<span class=\"token punctuation\">.</span>writerow<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write to CSV ERROR\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>定义主体函数  <code>clean</code>  ，读取新数据文件，收集已处理行的唯一标识符。这一步主要是为了防止程序意外终止，后续清理时重复写入数据，增加程序适用性。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>unique_rows <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>new_file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        reader <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> reader<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            unique_rows<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 唯一标识是 poiid</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read new_data.csv failed: \"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>接着读取原始数据文件，对于未处理的行，如果其 text 字段为空，则尝试重新调用  <code>get_poi_text</code>  函数获取文本信息并更新。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> file1<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    reader <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    origin_rows <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    updated_rows <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>origin_rows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> unique_rows<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> row<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    row<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> get_poi_text<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"get the new poi text of </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, the poi text is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>row<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Error fetching text for </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            unique_rows<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            updated_rows<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>考虑到每次更新的数据都会被添加到列表中，这会直接占用内存，如果数据量一大很可能导致内存泄露。因此有必要即时地将新数据存储到指定文件中。另一方面，我为了防止程序异常终止导致列表中的数据没有及时存入文件中，因此我设置的是每处理 30 行或处理完所有行后写入新数据文件。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>updated_rows<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">30</span> <span class=\"token keyword\">or</span> index <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>origin_rows<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    write_to_new_csv<span class=\"token punctuation\">(</span>updated_rows<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    updated_rows <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n</ol>\n<br> \n<h2 id=\"结果展示\"><a class=\"anchor\" href=\"#结果展示\">#</a> 结果展示</h2>\n<p>爬取过程截图如下：</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202407/202407252239399.png?x-oss-process=image/format,webp\" alt=\"爬取流程截图\" title=\"爬取流程截图\" /></p>\n<p>最终获取的 csv 文件内容预览：</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202407/202407252241284.png?x-oss-process=image/format,webp\" alt=\"数据截图\" title=\"数据截图\" /></p>\n<br> \n<h2 id=\"补充\"><a class=\"anchor\" href=\"#补充\">#</a> 补充</h2>\n<h3 id=\"不足\"><a class=\"anchor\" href=\"#不足\">#</a> 不足</h3>\n<p>目前这个爬虫程序在数据收集方面取得了一定的进展，但仍存在一些明显的不足之处：</p>\n<ol>\n<li><strong>POI 遍历方法的局限性</strong>：目前所采用的 POI 遍历方法尚未达到理想的效率。尽管已经能够获取到一定量级的数据，但与预期目标相比，数据量仍显不足，仅达到万级规模。不过更好的遍历方法我现在也尚未发现。</li>\n<li><strong>代理池的缺失</strong>：由于微博严格的反爬机制，本项目并没有使用代理池。这样就导致数据收集速度受限。例如，我在服务器上运行爬虫一夜，也仅完成了对北京市数据的收集，且数量仅有一万多条。</li>\n</ol>\n<p>但这篇博客的目的在于记录和学习，所以我就简单地总结本项目中我在代理池上的实践和收获。这里附上有关代理池基础知识的两篇参考博客 <a href=\"https://blog.csdn.net/qq_51447496/article/details/135747831\">[1]</a>、<a href=\"https://blog.csdn.net/wq10_12/article/details/135247453\">[2]</a>。</p>\n<h3 id=\"代理池\"><a class=\"anchor\" href=\"#代理池\">#</a> 代理池</h3>\n<p>我在  <code>proxy.py</code>  文件里封装了一系列函数。具体的代码实现如下：</p>\n<h4 id=\"引入依赖库\"><a class=\"anchor\" href=\"#引入依赖库\">#</a> 引入依赖库</h4>\n<p>首先，脚本引入了所需的 Python 库：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> fake_useragent <span class=\"token keyword\">import</span> UserAgent</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> datetime</pre></td></tr></table></figure><h4 id=\"代理有效性检查\"><a class=\"anchor\" href=\"#代理有效性检查\">#</a> 代理有效性检查</h4>\n<p><code>check_proxy</code>  函数用于测试代理 IP 的有效性。通过向百度发起一个 GET 请求，如果响应状态码为 200，认为代理有效。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">check_proxy</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span> proxies<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">:</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token string\">'https'</span><span class=\"token punctuation\">:</span> proxy<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">except</span> requests<span class=\"token punctuation\">.</span>RequestException<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr></table></figure><h4 id=\"从服务商中获取代理ip\"><a class=\"anchor\" href=\"#从服务商中获取代理ip\">#</a> 从服务商中获取代理 IP</h4>\n<p><code>get_ihuan_ip</code> 、 <code>get_proxy_list</code>  函数分别从 ihuan 网站和 proxy-list 网站获取代理 IP。</p>\n<p>将不同代理网站爬取 IP 的逻辑写到对应的函数中，这样可以很方便地扩充新的代理。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_ihuan_ip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_proxy_list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>用列表存储所有代理网站的接口，便于管理和调用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>proxy_funcs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>get_ihuan_ip<span class=\"token punctuation\">,</span> get_proxy_list<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>proxy_func_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ihuan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"proxy-list\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"测试代理可用性\"><a class=\"anchor\" href=\"#测试代理可用性\">#</a> 测试代理可用性</h4>\n<p>封装  <code>test</code>  函数遍历所有代理获取函数，测试并打印出哪些代理源是有用的。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------ try test proxy func ---------\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>proxy_funcs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            lst <span class=\"token operator\">=</span> proxy_funcs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> lst<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>proxy_func_names<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is useful!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>proxy_func_names<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is useless... for the reason that there is no useful ip\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>proxy_func_names<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is useless... for the reason that\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"获取可用代理ip\"><a class=\"anchor\" href=\"#获取可用代理ip\">#</a> 获取可用代理 IP</h4>\n<p>最后是主函数  <code>get_proxys</code> ，该函数尝试从所有代理源获取代理 IP，直到返回第一个成功的结果。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_proxys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> fun <span class=\"token keyword\">in</span> proxy_funcs<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        lst <span class=\"token operator\">=</span> fun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> lst<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> lst</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"开源\"><a class=\"anchor\" href=\"#开源\">#</a> 开源</h3>\n<p>目前本项目已全部开源（<a href=\"https://gitee.com/Jongsh/weibo-poi-crawler\">传送门</a>)。</p>\n",
            "tags": [
                "编程日常"
            ]
        },
        {
            "id": "https://blog.jongsh.top/learning-note/linux-nfs-cifs/",
            "url": "https://blog.jongsh.top/learning-note/linux-nfs-cifs/",
            "title": "Linux 环境配置 NFS 与 CIFS",
            "date_published": "2024-07-16T02:01:28.000Z",
            "content_html": "<p>暑期实习两周，负责老师终于给我派了任务。闲来无事，遂写下这篇博客记录所学内容和踩过的坑。</p>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>网络文件系统（NFS）最早是由 Sun 公司发展出来的，也是 FreeBSD 支持的文件系统中的一个，它允许网络中的计算机之间通过 TCP/IP 网络共享资源。通过 NFS，我们本地 NFS 的客户端应用可以透明地读写位于服务端 NFS 服务器上的文件，就像访问本地文件一样方便。简单的理解，NFS 就是可以透过网络，让不同的主机、不同的操作系统可以共享存储的服务。</p>\n<p>通用 Internet 文件系统（CIFS）最初由微软于 1990 年代中期发布，是服务器消息块（SMB）文件访问协议的扩展。CIFS 在 Windows 操作系统的网络环境中被广泛使用，但在现代系统实施中，更新版本的 SMB 已经取代了 CIFS。</p>\n<p>二者之间的一些对比和区别如下：</p>\n<ul>\n<li>CIFS 面向网络连接的共享协议，对网络传输的可靠性要求高，常使用 TCP/IP；NFS 是独立于传输的，可使用 TCP 或 UDP。</li>\n<li>NFS 共享资源的能力仅限于文件和目录。相比之下，CIFS 还可以提供与其他网络设备（例如打印机）的共享资源通信。</li>\n<li>NFS 和 CIFS 最初是针对不同的操作系统设计的。CIFS 针对的是 Windows 操作系统，NFS 则针对 Unix。这意味着这两种协议是为了利用各自的操作系统内核来实施最佳操作而构建的。虽然可以在基于 Linux 的操作系统中使用 CIFS（通过 Samba），在 Windows 操作系统上使用 NFS（通过第三方软件包），但这些不是原生支持的做法。</li>\n<li>NFS 传统上依赖于基于<strong>主机</strong>的身份验证，在这种身份验证中，<strong>对共享文件的访问是根据客户端计算机的 IP 地址或主机名来控制的</strong>。它的内置安全机制有限，这在开放网络中可能是一个问题。而 CIFS 提供了更高级的身份验证和安全功能。<strong>它支持基于用户的身份验证，因此个人用户可以使用其凭证访问共享资源</strong>。CIFS 还支持加密和其他安全机制，这使其更适合安全环境。</li>\n<li>NFS 采用无状态设计，这意味着它不会跟踪服务器上打开的文件。因此，文件锁定由客户端处理，当多个客户端尝试同时写入同一个文件时，就会发生冲突。CIFS 支持服务器端的文件锁定，当多个客户端访问同一个文件时，它可以更好地进行协调并避免冲突。</li>\n<li>在性能方面，NFS 使用开销更少的轻量级协议，从而加快文件访问和传输速度。相反，CIFS 支持各种特定于 Windows 的功能，因此协议开销更大。</li>\n</ul>\n<p>整理成表格如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对比</th>\n<th style=\"text-align:center\">NFS</th>\n<th style=\"text-align:center\">CIFS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">当前版本</td>\n<td style=\"text-align:center\">NFS 4</td>\n<td style=\"text-align:center\">已被 SMB 版本 3.1.1 所取代</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">适合的操作系统</td>\n<td style=\"text-align:center\">基于 Linux 的网络架构</td>\n<td style=\"text-align:center\">需要时可用于基于 Windows 的传统架构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">共享资源</td>\n<td style=\"text-align:center\">文件或目录</td>\n<td style=\"text-align:center\">文件、目录和网络资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">身份验证</td>\n<td style=\"text-align:center\">基于 IP</td>\n<td style=\"text-align:center\">基于用户</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">文件锁定</td>\n<td style=\"text-align:center\">由客户处理</td>\n<td style=\"text-align:center\">由服务器处理</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">性能</td>\n<td style=\"text-align:center\">协议开销低，性能较快</td>\n<td style=\"text-align:center\">协议开销高，性能较低</td>\n</tr>\n</tbody>\n</table>\n<p>当前，有个开发需求：由一台服务器提供磁盘，共享给另一台服务器使用。这篇博客就分别介绍使用 NFS 和 CIFS 如何进行配置。该需求用于两个 Linux/Unix 系统，因此在配置 CIFS 时需要使用到 Samba 服务。</p>\n<br> \n<h2 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h2>\n<p>当前需求中的两台机器，提供磁盘存储的称为服务端，使用共享存储空间的称为客户端。整个流程梳理下来就是将服务端中的某一目录共享给客户端使用。</p>\n<p>如果当前服务端只有磁盘设备或文件系统，那么需要先挂在到某一目录下，这个目录就是需要共享的目录，这里设为  <code>/share</code> 。</p>\n<p><strong>将文件系统挂在到目录的方法如下</strong>：</p>\n<p>使用  <code>fdisk -l</code>  命令可以查看未挂载的磁盘或文件系统。</p>\n<p>一般来说，磁盘设备都会放到  <code>/dev</code>  目录下，在找到需要挂在的磁盘名后，可以到该目录下进行查找，找到对应的路径。这里比如设为  <code>/dev/sdg</code> 。这样就可以用下面的命令将磁盘挂在到需要共享的目录下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mount</span> /dev/sdg /share</pre></td></tr></table></figure><p>再用  <code>mount</code>  命令查看是否已经挂在成功。磁盘被手动挂载之后都必须把挂载信息写入  <code>/etc/fstab</code>  这个文件中，否则下次开机启动时仍然需要重新挂载。系统开机时会主动读取  <code>/etc/fstab</code>  这个文件中的内容，根据文件里面的配置挂载磁盘。这样只需要将磁盘的挂载信息写入这个文件中就可完成自动挂载。</p>\n<p>以一个已经挂载好的例子作展示：</p>\n<ul>\n<li>\n<p>首先通过  <code>blkid</code>  命令将需要挂在的设备 uuid 查询出来并复制（往  <code>/etc/fstab</code>  中追加挂载信息时建议使用 uuid）。</p>\n</li>\n<li>\n<p><code>vim /etc/fstab</code>  进入该文件进行修改，添加挂载信息。</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202407/202407152052438.png?x-oss-process=image/format,webp\" alt=\"文件系统挂载\" title=\"文件系统挂载\" /></p>\n<p>关于  <code>/etc/fstab</code>  中的内容，可以分成六列参数：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Device\t\tMount point\t\tfileSystem\t\tparams\t\t    dump\t\t<span class=\"token function\">fsck</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>label 或 uuid   \t挂载的目录\t    文件系统格式    文件系统参数     <span class=\"token number\">0</span>、1、2        <span class=\"token number\">0</span>、1、2</pre></td></tr></table></figure><blockquote>\n<p>一般使用该设备 uuid，因为一旦磁盘插槽顺序发生变化，label 可能会改变，uuid 是不会变化的。</p>\n<p>文件系统格式可以用  <code>mount</code>  命令查看。</p>\n<p>文件系统参数可以查看参考资料，不清楚的情况下可以写  <code>defaults</code> 。</p>\n<p>最后两个参数分别表示 &quot;能否被 dump 备份命令作用&quot; 和 &quot;是否检验扇区&quot;，不清楚的情况下可以写  <code>0 0</code> 。</p>\n</blockquote>\n</li>\n</ul>\n<p>对于需要共享的目录，为了防止出现权限问题，可以设置最大权限：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token parameter variable\">-R</span> <span class=\"token number\">777</span> /share</pre></td></tr></table></figure><p>共享文件设置完成后，客户端也要创建一个用于挂在共享目录的目录，这里设为  <code>/mnt/nfsmount</code>  和  <code>/mnt/smbmount</code> ，分别对于接下来要介绍的两种方法。</p>\n<p><em>注意，本博客的 Linux 环境是基于 Red Hat 的系统（如 CentOS 和 Fedora），而基于 Debian 的系统（如 Ubuntu）它们的命令语法和软件包更新方式有所不同，所以后续配置过程用到的部分命令，不同系统会有不一样的实现，甚至软件包都有的不一样，因此 Debian 系统的配置建议重新查阅专门的教程。</em></p>\n<br> \n<h2 id=\"nfscifs-配置\"><a class=\"anchor\" href=\"#nfscifs-配置\">#</a> NFS/CIFS 配置</h2>\n<p>这一节将分别对 NFS 和 CIFS (Samba) 的配置进行介绍。</p>\n<h3 id=\"nfs-配置\"><a class=\"anchor\" href=\"#nfs-配置\">#</a> NFS 配置</h3>\n<p>NFS 服务端需要安装  <code>rpcbind</code>  和  <code>nfs-utils</code> ，客户端需要安装  <code>nfs-utils</code>  。</p>\n<p>首先在服务端系统确认是否已经安装 NFS（客户端相同）：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-qa</span> nfs-utils rpcbind</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nfs-utils-1.3.0-0.54.el7.x86_64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rpcbind-0.2.0-38.el7.x86_64</pre></td></tr></table></figure><p>如果没有输出，则分别在服务端和客户端进行安装：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> nfs-utils rpcbind  <span class=\"token comment\"># 服务端</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> nfs-utils          <span class=\"token comment\"># 客户端</span></pre></td></tr></table></figure><p>接着修改 NFS 配置文件  <code>/etc/exports</code> ，配置像哪些主机共享自己的文件目录。</p>\n<p>使用  <code>vim</code>  命令进入配置文件，然后添加如下内容：</p>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/share 192.168.1.0/24(rw,sync,insecure,no_subtree_check,no_root_squash)</pre></td></tr></table></figure><p>该配置中第一个字段就是服务端需要被共享的文件的绝对路径，之后  <code>192.168.1.0/24</code>  表明哪些 IP 区间的主机可以使用共享目录。括号里的字段是对共享文件管理的参数配置，详细可见下表（只列出了常用的一些配置）：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>ro</code></td>\n<td style=\"text-align:center\">只读访问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>rw</code></td>\n<td style=\"text-align:center\">读写访问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>sync</code></td>\n<td style=\"text-align:center\">所有数据在请求时写入共享</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>async</code></td>\n<td style=\"text-align:center\">nfs 在写入数据前可以响应请求</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>secure</code></td>\n<td style=\"text-align:center\">nfs 通过 1024 以下的安全 TCP/IP 端口发送</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>insecure</code></td>\n<td style=\"text-align:center\">nfs 通过 1024 以上的端口发送</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>wdelay</code></td>\n<td style=\"text-align:center\">如果多个用户要写入 nfs 目录，则归组写入（默认）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>no_wdelay</code></td>\n<td style=\"text-align:center\">如果多个用户要写入 nfs 目录，则立即写入，当使用 async 时，无需此设置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>hide</code></td>\n<td style=\"text-align:center\">在 nfs 共享目录中不共享其子目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>no_hide</code></td>\n<td style=\"text-align:center\">共享 nfs 目录的子目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>subtree_check</code></td>\n<td style=\"text-align:center\">如果共享 /usr/bin 之类的子目录时，强制 nfs 检查父目录的权限（默认）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>no_subtree_check</code></td>\n<td style=\"text-align:center\">不检查父目录权限</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>root_squash</code></td>\n<td style=\"text-align:center\">root 用户的所有请求映射成如 anonymous 用户一样的权限（默认）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>no_root_squash</code></td>\n<td style=\"text-align:center\">root 用户具有根目录的完全管理访问权限</td>\n</tr>\n</tbody>\n</table>\n<p>接着依次执行如下命令，启动 NFS 服务端功能：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">service</span> rpcbind start  <span class=\"token comment\"># 启动 RPC 服务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">service</span> nfs start      <span class=\"token comment\"># 启动 NFS 服务</span></pre></td></tr></table></figure><p>可以使用如下命令检查是否启用了对 NFS 的端口映射列表：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rpcinfo <span class=\"token parameter variable\">-p</span> localhost</pre></td></tr></table></figure><p>接着执行下述命令查看服务端是否正确加载了  <code>/etc/exports</code>  配置：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ showmount <span class=\"token parameter variable\">-e</span> localhost</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/share <span class=\"token number\">192.168</span>.1.10/24</pre></td></tr></table></figure><p>看到正确输出共享目录信息后则表明服务端已经配置完成，接下来继续配置 NFS 客户端。</p>\n<p>在客户端机器上执行如下命令测试共享目录是否可用：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>showmount <span class=\"token parameter variable\">-e</span> 服务端ip</pre></td></tr></table></figure><p>如果正确输出共享目录的信息，就可以继续下一步：挂载共享目录到本地目录（这里是  <code>/mnt/nfsmount</code> ）。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mount</span> 服务端ip:/share /mnt/nfsmount</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span></pre></td></tr></table></figure><p>至此，可以看到，已经正确地将远端 NFS 共享目录（ <code>/share</code> ）挂载到本地（ <code>/mnt/nfsmount</code> ）上了。</p>\n<p>最后别忘了实现自动化挂载，方法同第二节相同，其中 Device 写成  <code>服务器ip:/share</code> ，文件系统格式一般为  <code>nfs</code> ，比如：</p>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>192.168.1.100:/share  /mnt/nfsmount  nfs  defaults  0 0</pre></td></tr></table></figure><h3 id=\"cifs-配置\"><a class=\"anchor\" href=\"#cifs-配置\">#</a> CIFS 配置</h3>\n<p>在 Linux 系统下配置 CIFS 需要使用 Samba 服务。Samba 是在 Linux 系统上实现 SMB 协议的一个免费软件，以实现文件共享和打印机服务共享。</p>\n<p>首先用下面命令确认一下当前系统是否安装了 Samba，使用命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-qa</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> samba</pre></td></tr></table></figure><p>其中，samba、samba-common、samba-client 三个程序是必须的。</p>\n<p>如果没有，则需要安装：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> samba</pre></td></tr></table></figure><p>接着需要添加用于 Samba 服务的用户，该用户必须已经在系统中存在。也可以现在创建一个新的用户，比如命名为  <code>smbuser</code> 。使用到的命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> smbuser</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>smbpasswd <span class=\"token parameter variable\">-a</span> smbuser</pre></td></tr></table></figure><p>接着按照提示为 Samba 用户设置密码，该用户将用于登录 Samba 服务器。之后修改配置文件  <code>/etc/samba/smb.conf</code> ，在文件最后添加如下内容：</p>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">share</span><span class=\"token punctuation\">]</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key attr-name\">comment</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">samba share folder</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token key attr-name\">browseable</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">yes</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token key attr-name\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">/share</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token key attr-name\">create mask</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">0700</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token key attr-name\">directory mask</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">0700</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token key attr-name\">valid users</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">smbuser</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token key attr-name\">force user</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">smbuser</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token key attr-name\">force group</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">smbuser</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token key attr-name\">public</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">yes</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token key attr-name\">available</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">yes</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token key attr-name\">writable</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">yes</span></pre></td></tr></table></figure><p>其中方括号内是给共享目录起的别名， <code>path</code>  是共享目录的绝对路径。</p>\n<p>配置完后重启 / 启动 Samba 服务，命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">service</span> smbd restart  <span class=\"token comment\"># 重启</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">service</span> smbd start    <span class=\"token comment\"># 启动</span></pre></td></tr></table></figure><p>此时服务端的配置基本已经完成。不出意外，到这一步已经可以用 windows 设备访问该服务端的共享目录了。由于我做的是 Linux 客户端，这部分内容详见参考资料，此处不再记录。</p>\n<p>接着为客户端进行配置。</p>\n<p>客户端需要安装 smbclient，安装后测试访问 Samba 共享目录是否可用。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> samba-client</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>smbclient //服务端ip/share_name <span class=\"token parameter variable\">-U</span> username</pre></td></tr></table></figure><p>** 这里注意  <code>share_name</code>  是  <code>smb.conf</code>  配置文件中方括号里起的别名。** 如果看到如下提示符，就证明共享目录可以正常工作：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>smb: <span class=\"token punctuation\">\\</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>接着需要将共享目录挂在到本地（此处为  <code>/mnt/smbmount</code> ），需要用到软件包 cifs-utils，使用如下命令可以下载：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> cifs-utils</pre></td></tr></table></figure><p>挂载共享目录用到如下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mount</span> <span class=\"token parameter variable\">-t</span> cifs //服务端ip/share /mnt/smbmount <span class=\"token parameter variable\">-o</span> <span class=\"token assign-left variable\">username</span><span class=\"token operator\">=</span>smbuser,password<span class=\"token operator\">=</span>   <span class=\"token comment\"># 我没设置 smbuser 密码</span></pre></td></tr></table></figure><p>此处我执行该命令的时候报了 Unable to apply new capability set 的错误，通过查阅资料发现是 cifs-utils 版本的问题。我用 yum 下载的版本为 6.10，需要手动升级版本，经查阅资料 6.15 版本可以解决该报错。其源码仓库位于 <a href=\"https://github.com/piastry/cifs-utils/tree/cifs-utils-6.15\">https://github.com/piastry/cifs-utils/tree/cifs-utils-6.15</a> 。依据提示，下载源码到客户端，进入顶级目录，依次执行如下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>autoreconf <span class=\"token parameter variable\">-i</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./configure</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p>之后再次运行挂载命令就成功了。可以使用  <code>df -h</code>  或  <code>mount</code>  命令检测是否已经将服务端共享目录挂在到本地。</p>\n<p>最后一步别忘了做持久化挂载，往  <code>/etc/fstab</code>  添加如下内容：</p>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">//服务端ip/share /mnt/smbmount cifs username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">smbuser,password=,defaults 0 0</span></pre></td></tr></table></figure><br> \n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<p><a href=\"https://aws.amazon.com/cn/compare/the-difference-between-nfs-and-cifs/\">NFS 与 CIFS - 文件系统之间的区别 - AWS (amazon.com)</a></p>\n<p><a href=\"https://blog.csdn.net/piaoranyuji/article/details/113740221\">Linux 查看磁盘、挂载磁盘、磁盘大小等常用操作</a></p>\n<p><a href=\"https://blog.csdn.net/qq_38633110/article/details/114259253\">Linux 挂载硬盘</a></p>\n<p><a href=\"https://cn.linux-console.net/?p=23143\">Linux 上的 Yum 和 Apt 指南 (linux-console.net)</a></p>\n<p><a href=\"https://blog.csdn.net/aixiaoyang168/article/details/83782336\">Linux 环境下 NFS 服务安装及配置使用</a></p>\n<p><a href=\"https://blog.csdn.net/zgt_certificate/article/details/140219339\">一步一步教你在 Ubuntu 上安装 NFS</a></p>\n<p><a href=\"https://blog.csdn.net/qq_38410730/article/details/80500920\">Samba 服务器超详细安装、配置</a></p>\n<p><a href=\"https://blog.csdn.net/qq_44078824/article/details/119847027\">【详细步骤】Ubuntu 安装 Samba 服务及配置共享文件夹</a></p>\n<p><a href=\"https://blog.51cto.com/u_6043682/5785156\">Linux 使用及配置 Samba 客户端访问 Samba 服务器</a></p>\n",
            "tags": [
                "学习笔记"
            ]
        },
        {
            "id": "https://blog.jongsh.top/blog-site/image-hosting-tips/",
            "url": "https://blog.jongsh.top/blog-site/image-hosting-tips/",
            "title": "图床那点事",
            "date_published": "2024-06-24T03:13:42.000Z",
            "content_html": "<p>在写第二篇博客时，我发现，我博客中引用自 gitee 图床的所有图片全都无法显示。一开始我以为是网速问题，但是刷新了几次都不成功，然后我试了别人博客的图片，却可以正常显现，我就知道是 gitee 的问题了。</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202406/202406291109355.png?x-oss-process=image/format,webp\" alt=\"图片无法加载\" title=\"图片无法加载\" height=\"80%\" width=\"80%\" /></p>\n<p>于是我开始想办法，首先我发现 github 做图床，可以使用 jsDelivr 加速服务，图片访问速度显著提升。而且我尝试使用加速后的图片地址，确实可以正常显示了。然而，GitHub 对仓库的大小有限制，大约为 2GB，这对于存放大量高清图片来说远远不够，因此我不得不放弃这一方案。</p>\n<p>后来我又找到几个图床网站，要么限制了图片的上传数量，要么有存储容量的限制，而且升级服务的费用几乎等同于我一年的服务器费用。这让我深刻体会到了 “免费即是昂贵” 的道理。</p>\n<p>最后，我把目光锁定到了阿里云 OSS 对象存储上，其中资源包 40G，一年只要 9 RMB，这可以说非常便宜了哇。虽然购买资源包后还需支付流量费用，但考虑到我的博客主要是个人使用，访问量不会太大，预计一年的流量费用不会超过 40 元人民币。因此，我果断决定使用 OSS 作为图床，不仅因为其成本效益，更因为大厂提供的服务质量和丰富的教程支持。这里也附上一篇<a href=\"https://blog.csdn.net/dingyuzhi/article/details/136941675\">教程</a>以供参考。</p>\n<p>经过四天的努力，我的博客小屋终于能够稳定运行了。虽然钱包因此消瘦了一些，但看到最终成果，还是值得的。</p>\n",
            "tags": [
                "博客网站"
            ]
        },
        {
            "id": "https://blog.jongsh.top/blog-site/cabin-building-record/",
            "url": "https://blog.jongsh.top/blog-site/cabin-building-record/",
            "title": "小屋搭建记录",
            "date_published": "2024-06-23T06:26:15.000Z",
            "content_html": "<blockquote>\n<p>本文详细记录了我在搭建个人博客网站的过程，同时也汇集了一系列宝贵的资料。</p>\n</blockquote>\n<h2 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h2>\n<h3 id=\"服务器宝塔linux面板wordpress\"><a class=\"anchor\" href=\"#服务器宝塔linux面板wordpress\">#</a> 服务器 + 宝塔 Linux 面板 + WordPress</h3>\n<p>前期的准备工作自然是选择一个合适的服务器，这里我选择了阿里云 99 优惠的服务器，主要是便宜，一个月不到 9 块。</p>\n<p>为了搭建一个既美观又实用的个人网站，我也是在网上冲浪了很久，最后把目标锁定在宝塔 Linux 面板 + WordPress 上。WordPress 是一个基于 PHP 的网站建设平台，以其丰富的插件和主题库而闻名。它易于安装和使用，即便是编程新手也能轻松上手，快速搭建出既美观又功能强大的网站。最重要的是，我在 github 上找到一款 WordPress 主题<a href=\"https://github.com/mashirozx/Sakura\"> Sakura</a>，完美契合了我的审美需求。</p>\n<p>关于阿里云服务器的配置、宝塔面板的安装和 WordPress 的部署，我基本完全按照<a href=\"https://blog.csdn.net/fantasticHQ/article/details/137994066\">这篇博客</a>来做，过程非常简单，也没有什么奇奇怪怪的问题。</p>\n<p>除了基本的搭建流程，我还额外完成了两项工作：一是设置图床，二是实现了服务器文件的上传与下载功能。</p>\n<h3 id=\"图床\"><a class=\"anchor\" href=\"#图床\">#</a> 图床</h3>\n<p>考虑到服务器存储空间的有限性，将所有图片直接存放在服务器上显然不是一个明智的选择。因此需要图床用于存放博客所需的图片资源。这里选择的是 gitee，原因有二：首先，我通常使用 GitHub，而 Gitee 提供了一个更为简洁且没有社交干扰的环境；其次，Gitee 的访问速度快，无需翻墙即可使用。</p>\n<p>当然了，每次使用 git 上传图片难免过程繁琐，效率低下。查找相关资料时，我发现 PicGo 工具可以实现一键上传功能，还可以和 Typora 绑定（由于我个人的习惯，没有绑定 Typora，因为不是所有图片都要上传到图床的）。相关的配置教程参考<a href=\"https://blog.csdn.net/qq_36547531/article/details/114985742\">这篇博客</a>，基本上照着做就行，但是由于博客发布比较早，PicGo 的版本已经更新到 2.3.1 了，对应新版本下载地址是<a href=\"https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.1\"> PicGo</a>。</p>\n<p>有了 PicGo，以后写博客需要引入图片时，只需要把图片一键上传到 Gitee。而 PicGo 会很贴心地把内容复制到剪贴板，而且是 markdown 格式的，让我能够无缝地将图片嵌入到我的博客文章中，真的非常方便。</p>\n<h3 id=\"服务器文件上传与下载\"><a class=\"anchor\" href=\"#服务器文件上传与下载\">#</a> 服务器文件上传与下载</h3>\n<p>在使用服务器进行文件管理时，经常需要对文件进行修改，上传或下载。虽然使用 VSCode 结合 SSH 可以方便地读写服务器上的文件，但在文件的上传和下载方面，它可能就不那么便捷了。为了解决这个问题，我推荐使用 WinSCP 工具。WinSCP 操作方式简洁直观，只需简单的拖放动作，即可轻松完成文件的上传和下载任务，这也是阿里云官方推荐的一种方法。这里附上对应的<a href=\"https://help.aliyun.com/zh/ecs/use-cases/use-winscp-to-upload-a-file-to-a-linux-instance?spm=a2c4g.11186623.0.i2\">使用教程</a>。</p>\n<p><strong>使用 WinSCP 连接时的设置</strong>：</p>\n<ul>\n<li>文件协议：选择 SFTP 或 SCP。</li>\n<li>主机名：Linux 云服务器的公网 IP 地址。</li>\n<li>端口号：默认为 22。</li>\n<li>用户名：登录云服务器的用户名，默认为 root。</li>\n<li>密码：购买 Linux 云服务器设置的密码或通过密钥方式转换后的密码。</li>\n</ul>\n<br> \n<h2 id=\"sakura-配置\"><a class=\"anchor\" href=\"#sakura-配置\">#</a> Sakura 配置</h2>\n<p>Sakura 主题的页面精美，二次元味道浓厚，<s>非常适合我这种肥宅</s>，而且关于 Sakura 配置的博客也非常多，本节就记录我博客网站用到的一些配置。</p>\n<p>关于一些基本操作，比如下载安装等，都在这篇<a href=\"https://yremp.live/wordpress-sakura-teach\">博客</a>里。还有 Sakura 主题基本的使用方法，这篇博客也介绍得非常详尽，因此本文仅记录用到的一些非 Sakura 原生的配置。</p>\n<blockquote>\n<p><strong>后面的配置都需要先在 WordPress 控制面板中 Sakura 主题设置的 CDN 中打开 “本地调用主题 js、css 文件”，而且必要时需清理浏览器缓存，这非常重要。</strong></p>\n</blockquote>\n<h3 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h3>\n<p><a href=\"https://yremp.live/wordpress-sakura-teach/\">Wordpress Sakura? 主题使用手册 | 流年，谁给过的倾城 | Yremp</a></p>\n<p><a href=\"https://blog.ukenn.top/sakura1/\">Sakura 主题美化系列（一）如何在菜单旁添加会动的小图标 – Ukenn Blog</a></p>\n<p><a href=\"https://fairysen.com/144.html\">『Sakura 主题美化 #01』在博客菜单上添加动态图标吧！ - 雾时之森 (fairysen.com)</a></p>\n<h3 id=\"顶部-logo\"><a class=\"anchor\" href=\"#顶部-logo\">#</a> 顶部 logo</h3>\n<p>顶部 logo 是指顶部导航栏左侧的图标文字。</p>\n<p>首先将下面 CSS 代码复制到 WordPress 管理面板 — 外观 — Sakura 主题设置 — 基本设置最下面的 &quot;自定义 CSS 样式&quot; 里。</p>\n<figure class=\"highlight scss\"><figcaption data-lang=\"Sass (Scss)\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*  logo  */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.logolink a </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #464646<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 800<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 56px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 56px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 35px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 11px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">text-decoration-line</span><span class=\"token punctuation\">:</span> none</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token selector\">.logolink .sakuraso </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> .5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #464646<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token property\">text-size-adjust</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> auto</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token selector\">.logolink a:hover .sakuraso </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #3aa800<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token selector\">.logolink a:hover .shironeko,</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.logolink a:hover .no,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.logolink a:hover rt </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #3aa800<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token selector\">.logolink.moe-mashiro a </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #464646<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 800<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 56px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 56px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 11px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token property\">text-decoration-line</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token selector\">.logolink.moe-mashiro .sakuraso,.logolink.moe-mashiro .no </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 9px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre> </pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token selector\">.logolink.moe-mashiro .no </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre> </pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token selector\">.logolink a:hover .no </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token property\">-webkit-animation</span><span class=\"token punctuation\">:</span> spin 1.5s linear infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> spin 1.5s linear infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre> </pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token selector\">.logolink ruby </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token property\">ruby-position</span><span class=\"token punctuation\">:</span> under<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token property\">-webkit-ruby-position</span><span class=\"token punctuation\">:</span> after<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre> </pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token selector\">.logolink ruby rt </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token property\">letter-spacing</span><span class=\"token punctuation\">:</span>2px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span>-15px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token property\">transiton-property</span><span class=\"token punctuation\">:</span> opacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token property\">transition-duration</span><span class=\"token punctuation\">:</span> 0.5s<span class=\"token punctuation\">,</span> 0.5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre> </pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token selector\">.logolink a:hover ruby rt </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1</pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre> </pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token selector\">.moe-mashiro </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'wenyihei-subfont'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Merriweather Sans'</span><span class=\"token punctuation\">,</span> Helvetica<span class=\"token punctuation\">,</span> Tahoma<span class=\"token punctuation\">,</span> Arial<span class=\"token punctuation\">,</span> <span class=\"token string\">'PingFang SC'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hiragino Sans GB'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Microsoft Yahei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'WenQuanYi Micro Hei'</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token selector\">.chinese-font </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Merriweather Sans'</span><span class=\"token punctuation\">,</span> Helvetica<span class=\"token punctuation\">,</span> Tahoma<span class=\"token punctuation\">,</span> Arial<span class=\"token punctuation\">,</span> <span class=\"token string\">'PingFang SC'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hiragino Sans GB'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Microsoft Yahei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'WenQuanYi Micro Hei'</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后修改  <code>header.php</code>  文件。</p>\n<p>将原文件对应的代码修改成：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- &lt;header class=\"site-header no-select\" role=\"banner\"> --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site-header no-select is-homepage gizle sabit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>banner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site-top<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site-branding<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">akina_option</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'akina_logo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token delimiter important\">?></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">bloginfo</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter important\">?></span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">echo</span> <span class=\"token function\">akina_option</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'akina_logo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token delimiter important\">?></span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span> <span class=\"token delimiter important\">?></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token comment\">&lt;!-- &lt;span class=\"logolink serif\"> --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logolink moe-mashiro<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">bloginfo</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter important\">?></span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t\t\t<span class=\"token comment\">&lt;!-- &lt;span class=\"site-name\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">echo</span> <span class=\"token function\">akina_option</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'site_name'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token delimiter important\">?></span></span>&lt;/span> --></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ruby</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sakuraso<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>穷拾<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>no<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>の<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shironeko<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>小屋<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rp</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rp</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rt</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>chinese-font<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Jongsh's Blog<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rt</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rp</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rp</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ruby</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token delimiter important\">?></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token comment\">&lt;!-- logo end --></span></pre></td></tr></table></figure><h3 id=\"导航栏\"><a class=\"anchor\" href=\"#导航栏\">#</a> 导航栏</h3>\n<p>导航栏实际上就是菜单，只需要在 WordPress 管理面板里进行相关设置即可。这里介绍的是如何设置带图标有动画效果的导航栏。</p>\n<p>在菜单设置部分，可以选择需要修改的菜单项中的 &quot;导航标签&quot;，比如首页可以修改成下面的内容：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>faa-parent animated-hover<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fa fa-home faa-wrench<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 首页<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>如果需要修改图标和动画效果，可以配合 <a href=\"https://fontawesome.com.cn/v4/icons\">Font Awesome 中文网</a> 和 <a href=\"http://l-lin.github.io/font-awesome-animation/\">Font Awesome Animation</a> 这两个网站使用。</p>\n<p>比如我希望给新的页面 &quot;日历&quot; 也加上图标和动画，到 <a href=\"https://fontawesome.com.cn/v4/icons\">Font Awesome 中文网</a> 找到心仪的图标：</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202406/202406291107679.png?x-oss-process=image/format,webp\" alt=\"Font-Awesome 图标\" title=\"Font-Awesome 图标\" /></p>\n<p>然后点击进去复制代码，并且也到 <a href=\"http://l-lin.github.io/font-awesome-animation/\">Font Awesome Animation</a> 里选择合适的动画效果，然后修改 &quot;导航标签&quot; 的内容如下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>faa-parent animated-hover<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fa fa-clock-o faa-spin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 日历<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>这里最开始尝试的时候一直没有成功，后来发现似乎是 Sakura 引入的样式是旧版的，所以找图标时也必须选用旧版网站的图标。</strong></p>\n<blockquote>\n<p>整理一下：</p>\n<p>Font Awesome 旧版入口：<a href=\"https://fontawesome.com.cn/v4\">https://fontawesome.com.cn/v4</a></p>\n<p>Font Awesome 新版入口：<a href=\"https://fontawesome.com.cn/\">https://fontawesome.com.cn/</a></p>\n<p>Font Awesome 动画：<a href=\"https://l-lin.github.io/font-awesome-animation/\">https://l-lin.github.io/font-awesome-animation/</a></p>\n</blockquote>\n<h3 id=\"封面页\"><a class=\"anchor\" href=\"#封面页\">#</a> 封面页</h3>\n<p>封面页的设置其实应该属于 Sakura 原生的配置。这里我选用的是随机图，因为更好看一些。</p>\n<p>基本的配置操作是：</p>\n<ul>\n<li>在 WordPress 管理面板 — Sakura 主题设置 — 第一屏勾选内置原图随机图</li>\n<li>将想要使用的多张图片放到主题文件下的  <code>/manifest/gallary/</code>  下，这就可以使用 WinSCP 很方便地上传文件了。</li>\n</ul>\n<p>设置完后刷新页面，应该就可以看到首页封面使用随机图了。</p>\n<h3 id=\"首页封面动态波浪效果\"><a class=\"anchor\" href=\"#首页封面动态波浪效果\">#</a> 首页封面动态波浪效果</h3>\n<p>首先在 <code>header.php</code>  文件中添加如下如下两行代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"banner_wave_1\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"banner_wave_2\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr></table></figure><p>修改后的部分代码如下：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">akina_option</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'head_focus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$filter</span> <span class=\"token operator\">=</span> <span class=\"token function\">akina_option</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'focus_img_filter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>headertop <span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">echo</span> <span class=\"token variable\">$filter</span><span class=\"token punctuation\">;</span> <span class=\"token delimiter important\">?></span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">get_template_part</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'layouts/imgbox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token delimiter important\">?></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>banner_wave_1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>banner_wave_2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>然后将将下面的 CSS 代码复制到主题目录的  <code>style.css</code>  文件最后：</p>\n<figure class=\"highlight scss\"><figcaption data-lang=\"Sass (Scss)\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 动态波浪效果 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>@-webkit-keyframes wave1<span class=\"token comment\">/*Safari and Chrome*/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">0% </span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-1500px<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>-5px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token selector\">50%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token selector\">100%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-1500px<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>-5px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@-webkit-keyframes</span> wave2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token selector\">0% </span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-1450px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token selector\">50%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token selector\">100%</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-1450px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>@keyframes wave1<span class=\"token comment\">/*Safari and Chrome*/</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token selector\">0% </span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-1500px<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>-5px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token selector\">50%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token selector\">100%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-1500px<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>-5px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> wave2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token selector\">0% </span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-1450px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token selector\">50%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token selector\">100%</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-1450px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token selector\">#banner_wave_1 </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>65px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span><span class=\"token url\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://cdn.jsdelivr.net/gh/yremp/resource@2.0/img/other/wave1.png\"</span><span class=\"token punctuation\">)</span> repeat-x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token property\">_filter</span><span class=\"token punctuation\">:</span><span class=\"token function\">alpha</span><span class=\"token punctuation\">(</span>opacity=80<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>400%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-236px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span>5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token property\">transiton-property</span><span class=\"token punctuation\">:</span>opacity<span class=\"token punctuation\">,</span>bottom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span>wave1 90s infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token property\">-webkit-animation</span><span class=\"token punctuation\">:</span>wave1 90s infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token selector\">#banner_wave_2 </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>80px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span><span class=\"token url\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://cdn.jsdelivr.net/gh/yremp/resource@2.0/img/other/wave2.png\"</span><span class=\"token punctuation\">)</span> repeat-x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token property\">_filter</span><span class=\"token punctuation\">:</span><span class=\"token function\">alpha</span><span class=\"token punctuation\">(</span>opacity=80<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>400%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span>4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token property\">transiton-property</span><span class=\"token punctuation\">:</span>opacity<span class=\"token punctuation\">,</span>bottom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span>wave2 90s infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token property\">-webkit-animation</span><span class=\"token punctuation\">:</span>wave2 90s infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token selector\">.banner_wave_hide,.banner_wave_hide_fit_skin </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span>0 <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>-999px <span class=\"token important\">!important</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span><span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span>860px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token selector\">#banner_wave_1,#banner_wave_2 </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>inline-block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>@-webkit-keyframes wave1<span class=\"token comment\">/*Safari and Chrome*/</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token selector\">0% </span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-750px<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>-2px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token selector\">50%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token selector\">100%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-750px<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>-2px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre> </pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@-webkit-keyframes</span> wave2</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token selector\">0% </span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-750px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token selector\">50%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token selector\">100%</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-750px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre> </pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>@keyframes wave1<span class=\"token comment\">/*Safari and Chrome*/</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token selector\">0% </span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-750px<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>-2px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token selector\">50%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token selector\">100%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-750px<span class=\"token punctuation\">;</span><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>-2px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre> </pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> wave2</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token selector\">0% </span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-750px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token selector\">50%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token selector\">100%</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-750px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre> </pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token selector\">#banner_wave_1 </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>65px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span><span class=\"token url\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://cdn.jsdelivr.net/gh/yremp/resource@2.0/img/other/wave1.png\"</span><span class=\"token punctuation\">)</span> repeat-x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token property\">_filter</span><span class=\"token punctuation\">:</span><span class=\"token function\">alpha</span><span class=\"token punctuation\">(</span>opacity=80<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>400%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>750px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span>5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token property\">transiton-property</span><span class=\"token punctuation\">:</span>opacity<span class=\"token punctuation\">,</span>bottom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span>wave1 90s infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token property\">-webkit-animation</span><span class=\"token punctuation\">:</span>wave1 60s infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token selector\">#banner_wave_2 </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>80px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span><span class=\"token url\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://cdn.jsdelivr.net/gh/yremp/resource@2.0/img/other/wave2.png\"</span><span class=\"token punctuation\">)</span> repeat-x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token property\">_filter</span><span class=\"token punctuation\">:</span><span class=\"token function\">alpha</span><span class=\"token punctuation\">(</span>opacity=80<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>400%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span>4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token property\">transiton-property</span><span class=\"token punctuation\">:</span>opacity<span class=\"token punctuation\">,</span>bottom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span>wave2 90s infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token property\">-webkit-animation</span><span class=\"token punctuation\">:</span>wave2 60s infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>清除浏览器缓冲，刷新页面就可以看到动态波浪效果了。</p>\n<h3 id=\"首页下拉箭头\"><a class=\"anchor\" href=\"#首页下拉箭头\">#</a> 首页下拉箭头</h3>\n<p>在 Sakura 主题目录下的  <code>layouts/imgbox.php</code>  文件中最后加上以下代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"headertop-down faa-float animated\"</span> onclick<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"headertop_down()\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>i <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"fa fa-chevron-down\"</span> aria<span class=\"token operator\">-</span>hidden<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"true\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>i<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr></table></figure><p>再往  <code>style.css</code>  文件中加入 CSS 代码：</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 首页下拉箭头样式 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.headertop-bar::after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 4.375rem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> -25%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> -2.875rem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token selector\">.headertop-down</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 860px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token selector\">.headertop-down</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token selector\">.headertop-down i</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 28px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token property\">-ms-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>1.5<span class=\"token punctuation\">,</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* IE 9 */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>1.5<span class=\"token punctuation\">,</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>1.5<span class=\"token punctuation\">,</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Standard syntax */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着还需要在  <code>js/sakura-app.js</code>  文件最后添加下列代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 首页箭头下拉效果 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">headertop_down</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> coverOffset <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html,body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">scrollTop</span><span class=\"token operator\">:</span> coverOffset</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>刷新页面，清理缓存就完成了。</p>\n<h3 id=\"看板娘\"><a class=\"anchor\" href=\"#看板娘\">#</a> 看板娘</h3>\n<p>首先在  <code>footer.php</code>  文件中加入下面的代码：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/gh/yremp/live2d@2.0/autoload.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>对应原文件的部分代码修改后如下：</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202406/202406291108372.png?x-oss-process=image/format,webp\" alt=\"看板娘代码\" title=\"看板娘代码\" height=\"80%\" width=\"80%\" /></p>\n<p>刷新后就可以看到博客页面有只看板娘了。</p>\n<h3 id=\"樱花飘落\"><a class=\"anchor\" href=\"#樱花飘落\">#</a> 樱花飘落</h3>\n<p>给页面添加樱花飘落的特性非常简单，在上述看板娘代码下面再引入一行代码即可。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 看板娘 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/gh/yremp/live2d@2.0/autoload.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!-- 樱花特效 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/gh/yremp/yremp-js@1.5/sakura.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"首页打字机效果\"><a class=\"anchor\" href=\"#首页打字机效果\">#</a> 首页打字机效果</h3>\n<p>Sakura 主题可以在首页设置一句话，一般可以写句诗来提升自己博客的逼格。</p>\n<p>这里找到了网上的教程，可以给诗增加打字效果，使得页面更加灵动。步骤如下：</p>\n<p>首先在 Sakura 主题目录下的  <code>layouts/imgbox.php</code>  文件中添加如下代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 首页一言打字效果 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"https://cdn.jsdelivr.net/npm/typed.js@2.0.11/lib/typed.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"header-quote\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>i <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"fa fa-quote-left\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>i<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>span <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"element\"</span><span class=\"token operator\">></span>疯狂读诗中<span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>i <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"fa fa-quote-right\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>i<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>span <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"element\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> typed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Typed</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'.element'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  strings<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"满院东风，海棠铺绣，梨花飘雪\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"鹏北海，风朝阳，又携书剑路茫茫\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"取次花丛懒回顾，半缘修道半缘君\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token argument-name\">typeSpeed</span><span class=\"token punctuation\">:</span> <span class=\"token number\">140</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 打字速度</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  backSpeed<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 回退速度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  loop<span class=\"token punctuation\">:</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 是否循环</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  loopCount<span class=\"token punctuation\">:</span> Infinity<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token argument-name\">showCursor</span><span class=\"token punctuation\">:</span> <span class=\"token constant boolean\">true</span><span class=\"token comment\">// 是否开启光标</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202406/202406291108072.png?x-oss-process=image/format,webp\" alt=\"首页打字机代码\" title=\"首页打字机代码\" height=\"80%\" width=\"80%\" /></p>\n<p>改后的默认字体不是特别好看，所以我修改了  <code>style.css</code> ，具体修改内容如下：</p>\n<p><img loading=\"lazy\" data-src=\"https://jongsh.oss-cn-beijing.aliyuncs.com/blog/content/202406/202406291109377.png?x-oss-process=image/format,webp\" alt=\"首页打字机样式\" title=\"首页打字机样式\" height=\"80%\" width=\"80%\" /></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.header-info .header-quote span</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Ubuntu<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 700</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>其实还有一些边边角角的修改，但是就不记录在这里了，前面的几篇博客基本都有。如果没有，就从博主的历史文章中找找看，一般都会有的。</p>\n</blockquote>\n<br> \n<h2 id=\"wordpress-插件\"><a class=\"anchor\" href=\"#wordpress-插件\">#</a> WordPress 插件</h2>\n<p>WordPress 提供了众多便捷实用的插件，极大地提升了使用体验。</p>\n<p><code>Simple Local Avatars</code> ：该插件允许用户直接在 WordPress 管理面板上设置个人头像，而无需依赖 Gravatar 服务。由于 Gravatar 在某些地区可能无法正常加载图片，这使得该插件在提升网站美观度方面显得尤为重要。</p>\n<p><code>WP Githuber MD</code> ：一个为 WordPress 网站提供全功能 Markdown 语法的插件。WordPress 写文章时是需要使用原生的编辑器的，这有点像 Word，虽然更方便一些。不过，对于用惯了 Markdown 的我来说，原生编辑器还是太难用了，而且我也不想一直打开管理面板写草稿，有一种一不小心就可能丢失的恐惧。这个插件可以提供 Markdown 编辑器服务，非常方便，不够似乎不能引入网络图片，有点难受。</p>\n<br> \n<h2 id=\"一些小问题\"><a class=\"anchor\" href=\"#一些小问题\">#</a> 一些小问题</h2>\n<h3 id=\"特色图\"><a class=\"anchor\" href=\"#特色图\">#</a> 特色图</h3>\n<p>Sakura 主题似乎需要对每篇博客都设置一张特色图，否则可能会有报错或其他奇奇怪怪的问题。</p>\n<p>这倒也不是什么大问题吧，就是我这 40G 存储的服务器存这么多图片，不知道能不能吃得消。</p>\n<h3 id=\"评论区\"><a class=\"anchor\" href=\"#评论区\">#</a> 评论区</h3>\n<p>博客发表后，点开评论区会发现一串 Warning，意思大概是  <code>functions.php</code>  文件中有一个变量没有初始化。</p>\n<p>改成下面这样就没事了：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">push_smilies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">global</span> <span class=\"token variable\">$wpsmiliestrans</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token variable\">$return_smiles</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 $return_smiles 变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$wpsmiliestrans</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$k</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token variable\">$Sname</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\":\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$k</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token variable\">$Svalue</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$v</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token variable\">$return_smiles</span> <span class=\"token operator\">.=</span> <span class=\"token string single-quoted-string\">'&lt;span title=\"'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$Sname</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'\" onclick=\"grin('</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"'\"</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$Sname</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"'\"</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">')\">&lt;img src=\"https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.9/img/Sakura/images/smilies/'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$Svalue</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'\" />&lt;/span>'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token variable\">$return_smiles</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"上下篇\"><a class=\"anchor\" href=\"#上下篇\">#</a> 上下篇</h3>\n<p>应该是这个主题的作者没有注意到的 bug，就是第一篇博客和最后一篇博客并没有下一篇和上一篇，但  <code>inc/theme_plus.php</code>  代码里似乎没有考虑这个问题，所以会有报错。</p>\n<p>找到其中有关上下篇逻辑的代码，并替换成下面的内容即可：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 获取相邻文章缩略图</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 特色图 -> 文章图 -> 首页图</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 上一篇</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">get_prev_thumbnail_url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token variable\">$prev_post</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_previous_post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$prev_post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">get_random_bg_url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 首页图</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">has_post_thumbnail</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$prev_post</span><span class=\"token operator\">-></span><span class=\"token constant\">ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token variable\">$img_src</span> <span class=\"token operator\">=</span> <span class=\"token function\">wp_get_attachment_image_src</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_post_thumbnail_id</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$prev_post</span><span class=\"token operator\">-></span><span class=\"token constant\">ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'large'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$img_src</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 特色图</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$prev_post</span><span class=\"token operator\">-></span><span class=\"token property\">post_content</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">preg_match_all</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/&lt;img.*?(?: |\\\\t|\\\\r|\\\\n)?src=[\\'\"]?(.+?)[\\'\"]?(?:(?: |\\\\t|\\\\r|\\\\n)+.*?)?>/sim'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$strResult</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PREG_PATTERN_ORDER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token variable\">$n</span> <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$strResult</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$n</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token variable\">$strResult</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 文章图</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">get_random_bg_url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 首页图</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 下一篇</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">get_next_thumbnail_url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token variable\">$next_post</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_next_post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$next_post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">get_random_bg_url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 首页图</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">has_post_thumbnail</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$next_post</span><span class=\"token operator\">-></span><span class=\"token constant\">ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token variable\">$img_src</span> <span class=\"token operator\">=</span> <span class=\"token function\">wp_get_attachment_image_src</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_post_thumbnail_id</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$next_post</span><span class=\"token operator\">-></span><span class=\"token constant\">ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'large'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$img_src</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 特色图</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$next_post</span><span class=\"token operator\">-></span><span class=\"token property\">post_content</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">preg_match_all</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/&lt;img.*?(?: |\\\\t|\\\\r|\\\\n)?src=[\\'\"]?(.+?)[\\'\"]?(?:(?: |\\\\t|\\\\r|\\\\n)+.*?)?>/sim'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$strResult</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PREG_PATTERN_ORDER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token variable\">$n</span> <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$strResult</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$n</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token variable\">$strResult</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 文章图</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">get_random_bg_url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 首页图</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "博客网站"
            ]
        },
        {
            "id": "https://blog.jongsh.top/blog-site/hello-world/",
            "url": "https://blog.jongsh.top/blog-site/hello-world/",
            "title": "世界，你好",
            "date_published": "2024-06-22T09:38:11.000Z",
            "content_html": "<p>经过三天的不懈努力，终于是把我的博客网站搭建起来了。其实很久之前就一直想着搭建一个自己的网站，但是苦于行动力不足，每次都半途而废，好在这次我坚持下来。虽然现在它看起来还相当简陋，但日后我会继续努力，让这间小破屋更加精美的。</p>\n<p>之后我会在这里不定时分享自己的学习和日常。如果你对此感兴趣，欢迎你的驻足与光临。</p>\n",
            "tags": [
                "博客网站"
            ]
        }
    ]
}